# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/PathSegment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg

class PathSegment(genpy.Message):
  _md5sum = "514c4a42318df3f68cc4c347460e4627"
  _type = "agv_msgs/PathSegment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/ID[] ids
agv_msgs/PathSegmentInfo info
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: agv_msgs/PathSegmentInfo
agv_msgs/ID id

uint8 type
uint8 UNKNOWN=0

string name
uint8[4] color"""
  __slots__ = ['ids','info']
  _slot_types = ['agv_msgs/ID[]','agv_msgs/PathSegmentInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ids,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathSegment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ids is None:
        self.ids = []
      if self.info is None:
        self.info = agv_msgs.msg.PathSegmentInfo()
    else:
      self.ids = []
      self.info = agv_msgs.msg.PathSegmentInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ids:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.info.id.data, _x.info.type))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.color
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ids is None:
        self.ids = None
      if self.info is None:
        self.info = agv_msgs.msg.PathSegmentInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ids = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.ids.append(val1)
      _x = self
      start = end
      end += 5
      (_x.info.id.data, _x.info.type,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      start = end
      end += 4
      self.info.color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ids:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.info.id.data, _x.info.type))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.color
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ids is None:
        self.ids = None
      if self.info is None:
        self.info = agv_msgs.msg.PathSegmentInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ids = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.ids.append(val1)
      _x = self
      start = end
      end += 5
      (_x.info.id.data, _x.info.type,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      start = end
      end += 4
      self.info.color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
