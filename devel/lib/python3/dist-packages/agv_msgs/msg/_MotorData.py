# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/MotorData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg

class MotorData(genpy.Message):
  _md5sum = "f9f1240e471258014c99a0aa28d83052"
  _type = "agv_msgs/MotorData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EncoderData enc
float32 torque            # Nm
float32 current           # A
float32 voltage           # V
float32 temperature       # C

# Some useful formulas for reference (use Si units)
# Mechanical power = torque * angular_velocity
# Electrical power = current * voltage
# Efficiency = mech. power / elec. power

================================================================================
MSG: agv_msgs/EncoderData
float32 velocity
float32 distance

uint8 units
uint8 RPM=0     # velocity in rpm,      distance in rotations
uint8 RAD_S=1   # velocity in rad/s,    distance in radians
uint8 M_S=2     # velocity in m/s,      distance in metres
uint8 TICKS=3   # velocity in ticks/s,  distance in ticks
"""
  __slots__ = ['enc','torque','current','voltage','temperature']
  _slot_types = ['agv_msgs/EncoderData','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enc,torque,current,voltage,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enc is None:
        self.enc = agv_msgs.msg.EncoderData()
      if self.torque is None:
        self.torque = 0.
      if self.current is None:
        self.current = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.temperature is None:
        self.temperature = 0.
    else:
      self.enc = agv_msgs.msg.EncoderData()
      self.torque = 0.
      self.current = 0.
      self.voltage = 0.
      self.temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fB4f().pack(_x.enc.velocity, _x.enc.distance, _x.enc.units, _x.torque, _x.current, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.enc is None:
        self.enc = agv_msgs.msg.EncoderData()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.enc.velocity, _x.enc.distance, _x.enc.units, _x.torque, _x.current, _x.voltage, _x.temperature,) = _get_struct_2fB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fB4f().pack(_x.enc.velocity, _x.enc.distance, _x.enc.units, _x.torque, _x.current, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.enc is None:
        self.enc = agv_msgs.msg.EncoderData()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.enc.velocity, _x.enc.distance, _x.enc.units, _x.torque, _x.current, _x.voltage, _x.temperature,) = _get_struct_2fB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB4f = None
def _get_struct_2fB4f():
    global _struct_2fB4f
    if _struct_2fB4f is None:
        _struct_2fB4f = struct.Struct("<2fB4f")
    return _struct_2fB4f
