# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/TrajectoryControllerState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TrajectoryControllerState(genpy.Message):
  _md5sum = "350099b8a58862f1bbb2702387d2460d"
  _type = "agv_msgs/TrajectoryControllerState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ST_IDLE = 0
uint8 ST_START = 1 
uint8 ST_OK = 2
uint8 ST_END = 3
uint8 ST_TRACKING_ERROR_HIGH = 4
uint8 ST_LATERAL_ERROR_HIGH = 5
uint8 ST_HEADING_ERROR_HIGH = 6
uint8 ST_ERROR = 7

uint8 state 
float64 lateral_error
float64 heading_error
float64 predicted_lateral_error
float64 predicted_heading_error
float64 travelled_trajectory_ratio
float64 stopping_position_on_trajectory
float64 target_centripetal_acceleration
float64 actual_centripetal_acceleration
float64 trajectory_centripetal_acceleration

Header trajectory_header
Header closest_point_header
float64 closest_point_offset
Header stopping_point_header
float64 stopping_point_offset
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  ST_IDLE = 0
  ST_START = 1
  ST_OK = 2
  ST_END = 3
  ST_TRACKING_ERROR_HIGH = 4
  ST_LATERAL_ERROR_HIGH = 5
  ST_HEADING_ERROR_HIGH = 6
  ST_ERROR = 7

  __slots__ = ['state','lateral_error','heading_error','predicted_lateral_error','predicted_heading_error','travelled_trajectory_ratio','stopping_position_on_trajectory','target_centripetal_acceleration','actual_centripetal_acceleration','trajectory_centripetal_acceleration','trajectory_header','closest_point_header','closest_point_offset','stopping_point_header','stopping_point_offset']
  _slot_types = ['uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','std_msgs/Header','std_msgs/Header','float64','std_msgs/Header','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,lateral_error,heading_error,predicted_lateral_error,predicted_heading_error,travelled_trajectory_ratio,stopping_position_on_trajectory,target_centripetal_acceleration,actual_centripetal_acceleration,trajectory_centripetal_acceleration,trajectory_header,closest_point_header,closest_point_offset,stopping_point_header,stopping_point_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryControllerState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.predicted_lateral_error is None:
        self.predicted_lateral_error = 0.
      if self.predicted_heading_error is None:
        self.predicted_heading_error = 0.
      if self.travelled_trajectory_ratio is None:
        self.travelled_trajectory_ratio = 0.
      if self.stopping_position_on_trajectory is None:
        self.stopping_position_on_trajectory = 0.
      if self.target_centripetal_acceleration is None:
        self.target_centripetal_acceleration = 0.
      if self.actual_centripetal_acceleration is None:
        self.actual_centripetal_acceleration = 0.
      if self.trajectory_centripetal_acceleration is None:
        self.trajectory_centripetal_acceleration = 0.
      if self.trajectory_header is None:
        self.trajectory_header = std_msgs.msg.Header()
      if self.closest_point_header is None:
        self.closest_point_header = std_msgs.msg.Header()
      if self.closest_point_offset is None:
        self.closest_point_offset = 0.
      if self.stopping_point_header is None:
        self.stopping_point_header = std_msgs.msg.Header()
      if self.stopping_point_offset is None:
        self.stopping_point_offset = 0.
    else:
      self.state = 0
      self.lateral_error = 0.
      self.heading_error = 0.
      self.predicted_lateral_error = 0.
      self.predicted_heading_error = 0.
      self.travelled_trajectory_ratio = 0.
      self.stopping_position_on_trajectory = 0.
      self.target_centripetal_acceleration = 0.
      self.actual_centripetal_acceleration = 0.
      self.trajectory_centripetal_acceleration = 0.
      self.trajectory_header = std_msgs.msg.Header()
      self.closest_point_header = std_msgs.msg.Header()
      self.closest_point_offset = 0.
      self.stopping_point_header = std_msgs.msg.Header()
      self.stopping_point_offset = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B9d3I().pack(_x.state, _x.lateral_error, _x.heading_error, _x.predicted_lateral_error, _x.predicted_heading_error, _x.travelled_trajectory_ratio, _x.stopping_position_on_trajectory, _x.target_centripetal_acceleration, _x.actual_centripetal_acceleration, _x.trajectory_centripetal_acceleration, _x.trajectory_header.seq, _x.trajectory_header.stamp.secs, _x.trajectory_header.stamp.nsecs))
      _x = self.trajectory_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.closest_point_header.seq, _x.closest_point_header.stamp.secs, _x.closest_point_header.stamp.nsecs))
      _x = self.closest_point_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.closest_point_offset, _x.stopping_point_header.seq, _x.stopping_point_header.stamp.secs, _x.stopping_point_header.stamp.nsecs))
      _x = self.stopping_point_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stopping_point_offset
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_header is None:
        self.trajectory_header = std_msgs.msg.Header()
      if self.closest_point_header is None:
        self.closest_point_header = std_msgs.msg.Header()
      if self.stopping_point_header is None:
        self.stopping_point_header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 85
      (_x.state, _x.lateral_error, _x.heading_error, _x.predicted_lateral_error, _x.predicted_heading_error, _x.travelled_trajectory_ratio, _x.stopping_position_on_trajectory, _x.target_centripetal_acceleration, _x.actual_centripetal_acceleration, _x.trajectory_centripetal_acceleration, _x.trajectory_header.seq, _x.trajectory_header.stamp.secs, _x.trajectory_header.stamp.nsecs,) = _get_struct_B9d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.closest_point_header.seq, _x.closest_point_header.stamp.secs, _x.closest_point_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.closest_point_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.closest_point_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.closest_point_offset, _x.stopping_point_header.seq, _x.stopping_point_header.stamp.secs, _x.stopping_point_header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stopping_point_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stopping_point_header.frame_id = str[start:end]
      start = end
      end += 8
      (self.stopping_point_offset,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B9d3I().pack(_x.state, _x.lateral_error, _x.heading_error, _x.predicted_lateral_error, _x.predicted_heading_error, _x.travelled_trajectory_ratio, _x.stopping_position_on_trajectory, _x.target_centripetal_acceleration, _x.actual_centripetal_acceleration, _x.trajectory_centripetal_acceleration, _x.trajectory_header.seq, _x.trajectory_header.stamp.secs, _x.trajectory_header.stamp.nsecs))
      _x = self.trajectory_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.closest_point_header.seq, _x.closest_point_header.stamp.secs, _x.closest_point_header.stamp.nsecs))
      _x = self.closest_point_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.closest_point_offset, _x.stopping_point_header.seq, _x.stopping_point_header.stamp.secs, _x.stopping_point_header.stamp.nsecs))
      _x = self.stopping_point_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stopping_point_offset
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_header is None:
        self.trajectory_header = std_msgs.msg.Header()
      if self.closest_point_header is None:
        self.closest_point_header = std_msgs.msg.Header()
      if self.stopping_point_header is None:
        self.stopping_point_header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 85
      (_x.state, _x.lateral_error, _x.heading_error, _x.predicted_lateral_error, _x.predicted_heading_error, _x.travelled_trajectory_ratio, _x.stopping_position_on_trajectory, _x.target_centripetal_acceleration, _x.actual_centripetal_acceleration, _x.trajectory_centripetal_acceleration, _x.trajectory_header.seq, _x.trajectory_header.stamp.secs, _x.trajectory_header.stamp.nsecs,) = _get_struct_B9d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.closest_point_header.seq, _x.closest_point_header.stamp.secs, _x.closest_point_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.closest_point_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.closest_point_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.closest_point_offset, _x.stopping_point_header.seq, _x.stopping_point_header.stamp.secs, _x.stopping_point_header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stopping_point_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stopping_point_header.frame_id = str[start:end]
      start = end
      end += 8
      (self.stopping_point_offset,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B9d3I = None
def _get_struct_B9d3I():
    global _struct_B9d3I
    if _struct_B9d3I is None:
        _struct_B9d3I = struct.Struct("<B9d3I")
    return _struct_B9d3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
