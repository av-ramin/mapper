# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/ZoneInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import genpy
import std_msgs.msg

class ZoneInfo(genpy.Message):
  _md5sum = "23fe4a88c361ecd57494678a1faa3171"
  _type = "agv_msgs/ZoneInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/ID id
string group
string name
std_msgs/ColorRGBA color
agv_msgs/KeyValue[] properties
bool visible
time creation_time
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: agv_msgs/KeyValue
string key
string value"""
  __slots__ = ['id','group','name','color','properties','visible','creation_time']
  _slot_types = ['agv_msgs/ID','string','string','std_msgs/ColorRGBA','agv_msgs/KeyValue[]','bool','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,group,name,color,properties,visible,creation_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ZoneInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.group is None:
        self.group = ''
      if self.name is None:
        self.name = ''
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.properties is None:
        self.properties = []
      if self.visible is None:
        self.visible = False
      if self.creation_time is None:
        self.creation_time = genpy.Time()
    else:
      self.id = agv_msgs.msg.ID()
      self.group = ''
      self.name = ''
      self.color = std_msgs.msg.ColorRGBA()
      self.properties = []
      self.visible = False
      self.creation_time = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id.data
      buff.write(_get_struct_I().pack(_x))
      _x = self.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.visible, _x.creation_time.secs, _x.creation_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.properties is None:
        self.properties = None
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.id.data,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.group = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = agv_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.properties.append(val1)
      _x = self
      start = end
      end += 9
      (_x.visible, _x.creation_time.secs, _x.creation_time.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      self.visible = bool(self.visible)
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id.data
      buff.write(_get_struct_I().pack(_x))
      _x = self.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.visible, _x.creation_time.secs, _x.creation_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.properties is None:
        self.properties = None
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.id.data,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.group = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = agv_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.properties.append(val1)
      _x = self
      start = end
      end += 9
      (_x.visible, _x.creation_time.secs, _x.creation_time.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      self.visible = bool(self.visible)
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
