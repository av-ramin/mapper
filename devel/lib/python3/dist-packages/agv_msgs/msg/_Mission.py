# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/Mission.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import genpy

class Mission(genpy.Message):
  _md5sum = "fdb503fbfee60173009aba68eb8b2b65"
  _type = "agv_msgs/Mission"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/MissionInfo info
agv_msgs/MissionProfile profile
================================================================================
MSG: agv_msgs/MissionInfo
  agv_msgs/ID id
  string name
  string description
  string group
  time creation_time
  time modification_time
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: agv_msgs/MissionProfile
agv_msgs/ID path_id
agv_msgs/NavigationConfig config
agv_msgs/ID[] behaviors
agv_msgs/ID[] zones
================================================================================
MSG: agv_msgs/NavigationConfig
uint8 direction
uint8 DIR_FORWARD=0
uint8 DIR_CLOCKWISE=0
uint8 DIR_REVERSE=1
uint8 DIR_COUNTERCLOCKWISE=1

uint8 repeat_mode
uint8 REPEAT_NONE=0
uint8 REPEAT_CIRCULAR=1
uint8 REPEAT_DOUBLE_BACK=2

uint16 no_of_loops
uint8 INFINITE_LOOPS = 0
uint8 SINGLE_EXECUTION = 1"""
  __slots__ = ['info','profile']
  _slot_types = ['agv_msgs/MissionInfo','agv_msgs/MissionProfile']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       info,profile

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mission, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.info is None:
        self.info = agv_msgs.msg.MissionInfo()
      if self.profile is None:
        self.profile = agv_msgs.msg.MissionProfile()
    else:
      self.info = agv_msgs.msg.MissionInfo()
      self.profile = agv_msgs.msg.MissionProfile()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.info.id.data
      buff.write(_get_struct_I().pack(_x))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5I2BH().pack(_x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.modification_time.secs, _x.info.modification_time.nsecs, _x.profile.path_id.data, _x.profile.config.direction, _x.profile.config.repeat_mode, _x.profile.config.no_of_loops))
      length = len(self.profile.behaviors)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile.behaviors:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
      length = len(self.profile.zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile.zones:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.info is None:
        self.info = agv_msgs.msg.MissionInfo()
      if self.profile is None:
        self.profile = agv_msgs.msg.MissionProfile()
      end = 0
      start = end
      end += 4
      (self.info.id.data,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.group = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.modification_time.secs, _x.info.modification_time.nsecs, _x.profile.path_id.data, _x.profile.config.direction, _x.profile.config.repeat_mode, _x.profile.config.no_of_loops,) = _get_struct_5I2BH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile.behaviors = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.profile.behaviors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile.zones = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.profile.zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.info.id.data
      buff.write(_get_struct_I().pack(_x))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5I2BH().pack(_x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.modification_time.secs, _x.info.modification_time.nsecs, _x.profile.path_id.data, _x.profile.config.direction, _x.profile.config.repeat_mode, _x.profile.config.no_of_loops))
      length = len(self.profile.behaviors)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile.behaviors:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
      length = len(self.profile.zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile.zones:
        _x = val1.data
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.info is None:
        self.info = agv_msgs.msg.MissionInfo()
      if self.profile is None:
        self.profile = agv_msgs.msg.MissionProfile()
      end = 0
      start = end
      end += 4
      (self.info.id.data,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.group = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.modification_time.secs, _x.info.modification_time.nsecs, _x.profile.path_id.data, _x.profile.config.direction, _x.profile.config.repeat_mode, _x.profile.config.no_of_loops,) = _get_struct_5I2BH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile.behaviors = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.profile.behaviors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile.zones = []
      for i in range(0, length):
        val1 = agv_msgs.msg.ID()
        start = end
        end += 4
        (val1.data,) = _get_struct_I().unpack(str[start:end])
        self.profile.zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5I2BH = None
def _get_struct_5I2BH():
    global _struct_5I2BH
    if _struct_5I2BH is None:
        _struct_5I2BH = struct.Struct("<5I2BH")
    return _struct_5I2BH
