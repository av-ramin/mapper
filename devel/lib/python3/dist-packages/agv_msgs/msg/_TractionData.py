# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/TractionData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import std_msgs.msg

class TractionData(genpy.Message):
  _md5sum = "6b382b54a342799235e892a0035f8c7b"
  _type = "agv_msgs/TractionData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
MotorData left
MotorData right

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: agv_msgs/MotorData
EncoderData enc
float32 torque            # Nm
float32 current           # A
float32 voltage           # V
float32 temperature       # C

# Some useful formulas for reference (use Si units)
# Mechanical power = torque * angular_velocity
# Electrical power = current * voltage
# Efficiency = mech. power / elec. power

================================================================================
MSG: agv_msgs/EncoderData
float32 velocity
float32 distance

uint8 units
uint8 RPM=0     # velocity in rpm,      distance in rotations
uint8 RAD_S=1   # velocity in rad/s,    distance in radians
uint8 M_S=2     # velocity in m/s,      distance in metres
uint8 TICKS=3   # velocity in ticks/s,  distance in ticks
"""
  __slots__ = ['header','left','right']
  _slot_types = ['std_msgs/Header','agv_msgs/MotorData','agv_msgs/MotorData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left,right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TractionData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = agv_msgs.msg.MotorData()
      if self.right is None:
        self.right = agv_msgs.msg.MotorData()
    else:
      self.header = std_msgs.msg.Header()
      self.left = agv_msgs.msg.MotorData()
      self.right = agv_msgs.msg.MotorData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fB6fB4f().pack(_x.left.enc.velocity, _x.left.enc.distance, _x.left.enc.units, _x.left.torque, _x.left.current, _x.left.voltage, _x.left.temperature, _x.right.enc.velocity, _x.right.enc.distance, _x.right.enc.units, _x.right.torque, _x.right.current, _x.right.voltage, _x.right.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = agv_msgs.msg.MotorData()
      if self.right is None:
        self.right = agv_msgs.msg.MotorData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.left.enc.velocity, _x.left.enc.distance, _x.left.enc.units, _x.left.torque, _x.left.current, _x.left.voltage, _x.left.temperature, _x.right.enc.velocity, _x.right.enc.distance, _x.right.enc.units, _x.right.torque, _x.right.current, _x.right.voltage, _x.right.temperature,) = _get_struct_2fB6fB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fB6fB4f().pack(_x.left.enc.velocity, _x.left.enc.distance, _x.left.enc.units, _x.left.torque, _x.left.current, _x.left.voltage, _x.left.temperature, _x.right.enc.velocity, _x.right.enc.distance, _x.right.enc.units, _x.right.torque, _x.right.current, _x.right.voltage, _x.right.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = agv_msgs.msg.MotorData()
      if self.right is None:
        self.right = agv_msgs.msg.MotorData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.left.enc.velocity, _x.left.enc.distance, _x.left.enc.units, _x.left.torque, _x.left.current, _x.left.voltage, _x.left.temperature, _x.right.enc.velocity, _x.right.enc.distance, _x.right.enc.units, _x.right.torque, _x.right.current, _x.right.voltage, _x.right.temperature,) = _get_struct_2fB6fB4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB6fB4f = None
def _get_struct_2fB6fB4f():
    global _struct_2fB6fB4f
    if _struct_2fB6fB4f is None:
        _struct_2fB6fB4f = struct.Struct("<2fB6fB4f")
    return _struct_2fB6fB4f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
