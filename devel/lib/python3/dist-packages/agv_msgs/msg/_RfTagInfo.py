# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/RfTagInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RfTagInfo(genpy.Message):
  _md5sum = "b788a49c92ea14828852cd337a50704a"
  _type = "agv_msgs/RfTagInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string tag_addr
string anchor_addr
float32 dist_to_anchor
uint8 tag_frame
bool btn0_state
bool btn1_state
bool btn2_state
uint8 battery_lvl
float32 first_path_power
float32 received_signal_strength
float32 covariance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','tag_addr','anchor_addr','dist_to_anchor','tag_frame','btn0_state','btn1_state','btn2_state','battery_lvl','first_path_power','received_signal_strength','covariance']
  _slot_types = ['std_msgs/Header','string','string','float32','uint8','bool','bool','bool','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tag_addr,anchor_addr,dist_to_anchor,tag_frame,btn0_state,btn1_state,btn2_state,battery_lvl,first_path_power,received_signal_strength,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RfTagInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tag_addr is None:
        self.tag_addr = ''
      if self.anchor_addr is None:
        self.anchor_addr = ''
      if self.dist_to_anchor is None:
        self.dist_to_anchor = 0.
      if self.tag_frame is None:
        self.tag_frame = 0
      if self.btn0_state is None:
        self.btn0_state = False
      if self.btn1_state is None:
        self.btn1_state = False
      if self.btn2_state is None:
        self.btn2_state = False
      if self.battery_lvl is None:
        self.battery_lvl = 0
      if self.first_path_power is None:
        self.first_path_power = 0.
      if self.received_signal_strength is None:
        self.received_signal_strength = 0.
      if self.covariance is None:
        self.covariance = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.tag_addr = ''
      self.anchor_addr = ''
      self.dist_to_anchor = 0.
      self.tag_frame = 0
      self.btn0_state = False
      self.btn1_state = False
      self.btn2_state = False
      self.battery_lvl = 0
      self.first_path_power = 0.
      self.received_signal_strength = 0.
      self.covariance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tag_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.anchor_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f5B3f().pack(_x.dist_to_anchor, _x.tag_frame, _x.btn0_state, _x.btn1_state, _x.btn2_state, _x.battery_lvl, _x.first_path_power, _x.received_signal_strength, _x.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tag_addr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.anchor_addr = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.dist_to_anchor, _x.tag_frame, _x.btn0_state, _x.btn1_state, _x.btn2_state, _x.battery_lvl, _x.first_path_power, _x.received_signal_strength, _x.covariance,) = _get_struct_f5B3f().unpack(str[start:end])
      self.btn0_state = bool(self.btn0_state)
      self.btn1_state = bool(self.btn1_state)
      self.btn2_state = bool(self.btn2_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tag_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.anchor_addr
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f5B3f().pack(_x.dist_to_anchor, _x.tag_frame, _x.btn0_state, _x.btn1_state, _x.btn2_state, _x.battery_lvl, _x.first_path_power, _x.received_signal_strength, _x.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tag_addr = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor_addr = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.anchor_addr = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.dist_to_anchor, _x.tag_frame, _x.btn0_state, _x.btn1_state, _x.btn2_state, _x.battery_lvl, _x.first_path_power, _x.received_signal_strength, _x.covariance,) = _get_struct_f5B3f().unpack(str[start:end])
      self.btn0_state = bool(self.btn0_state)
      self.btn1_state = bool(self.btn1_state)
      self.btn2_state = bool(self.btn2_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_f5B3f = None
def _get_struct_f5B3f():
    global _struct_f5B3f
    if _struct_f5B3f is None:
        _struct_f5B3f = struct.Struct("<f5B3f")
    return _struct_f5B3f
