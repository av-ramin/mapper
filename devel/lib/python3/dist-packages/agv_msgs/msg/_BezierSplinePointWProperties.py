# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/BezierSplinePointWProperties.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class BezierSplinePointWProperties(genpy.Message):
  _md5sum = "0cdbfbe79a6088558695ff1f7bb13843"
  _type = "agv_msgs/BezierSplinePointWProperties"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Point coord
geometry_msgs/Point cp0
geometry_msgs/Point cp1
agv_msgs/SplineDriveParam[] drive_param
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: agv_msgs/SplineDriveParam
float64 position_offset
float64 desired_v
float64 max_a
float64 incline_angle"""
  __slots__ = ['header','coord','cp0','cp1','drive_param']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','agv_msgs/SplineDriveParam[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,coord,cp0,cp1,drive_param

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BezierSplinePointWProperties, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.coord is None:
        self.coord = geometry_msgs.msg.Point()
      if self.cp0 is None:
        self.cp0 = geometry_msgs.msg.Point()
      if self.cp1 is None:
        self.cp1 = geometry_msgs.msg.Point()
      if self.drive_param is None:
        self.drive_param = []
    else:
      self.header = std_msgs.msg.Header()
      self.coord = geometry_msgs.msg.Point()
      self.cp0 = geometry_msgs.msg.Point()
      self.cp1 = geometry_msgs.msg.Point()
      self.drive_param = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.coord.x, _x.coord.y, _x.coord.z, _x.cp0.x, _x.cp0.y, _x.cp0.z, _x.cp1.x, _x.cp1.y, _x.cp1.z))
      length = len(self.drive_param)
      buff.write(_struct_I.pack(length))
      for val1 in self.drive_param:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position_offset, _x.desired_v, _x.max_a, _x.incline_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.coord is None:
        self.coord = geometry_msgs.msg.Point()
      if self.cp0 is None:
        self.cp0 = geometry_msgs.msg.Point()
      if self.cp1 is None:
        self.cp1 = geometry_msgs.msg.Point()
      if self.drive_param is None:
        self.drive_param = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.coord.x, _x.coord.y, _x.coord.z, _x.cp0.x, _x.cp0.y, _x.cp0.z, _x.cp1.x, _x.cp1.y, _x.cp1.z,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drive_param = []
      for i in range(0, length):
        val1 = agv_msgs.msg.SplineDriveParam()
        _x = val1
        start = end
        end += 32
        (_x.position_offset, _x.desired_v, _x.max_a, _x.incline_angle,) = _get_struct_4d().unpack(str[start:end])
        self.drive_param.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.coord.x, _x.coord.y, _x.coord.z, _x.cp0.x, _x.cp0.y, _x.cp0.z, _x.cp1.x, _x.cp1.y, _x.cp1.z))
      length = len(self.drive_param)
      buff.write(_struct_I.pack(length))
      for val1 in self.drive_param:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position_offset, _x.desired_v, _x.max_a, _x.incline_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.coord is None:
        self.coord = geometry_msgs.msg.Point()
      if self.cp0 is None:
        self.cp0 = geometry_msgs.msg.Point()
      if self.cp1 is None:
        self.cp1 = geometry_msgs.msg.Point()
      if self.drive_param is None:
        self.drive_param = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.coord.x, _x.coord.y, _x.coord.z, _x.cp0.x, _x.cp0.y, _x.cp0.z, _x.cp1.x, _x.cp1.y, _x.cp1.z,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drive_param = []
      for i in range(0, length):
        val1 = agv_msgs.msg.SplineDriveParam()
        _x = val1
        start = end
        end += 32
        (_x.position_offset, _x.desired_v, _x.max_a, _x.incline_angle,) = _get_struct_4d().unpack(str[start:end])
        self.drive_param.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
