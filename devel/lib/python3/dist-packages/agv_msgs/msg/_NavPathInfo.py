# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/NavPathInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import genpy
import std_msgs.msg

class NavPathInfo(genpy.Message):
  _md5sum = "15f56a45b039a39725c3469a1fbf2667"
  _type = "agv_msgs/NavPathInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/ID id
time creation_time

uint8 type
uint8 UNKNOWN=0
uint8 MANUAL=1
uint8 RECORDED=2
uint8 IMPORTED=3

uint8 uncertainty
uint8 OK=0
uint8 UNCERTAIN=1

string name
std_msgs/ColorRGBA color
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  # Pseudo-constants
  UNKNOWN = 0
  MANUAL = 1
  RECORDED = 2
  IMPORTED = 3
  OK = 0
  UNCERTAIN = 1

  __slots__ = ['id','creation_time','type','uncertainty','name','color']
  _slot_types = ['agv_msgs/ID','time','uint8','uint8','string','std_msgs/ColorRGBA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,creation_time,type,uncertainty,name,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavPathInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      if self.type is None:
        self.type = 0
      if self.uncertainty is None:
        self.uncertainty = 0
      if self.name is None:
        self.name = ''
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
    else:
      self.id = agv_msgs.msg.ID()
      self.creation_time = genpy.Time()
      self.type = 0
      self.uncertainty = 0
      self.name = ''
      self.color = std_msgs.msg.ColorRGBA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I2B().pack(_x.id.data, _x.creation_time.secs, _x.creation_time.nsecs, _x.type, _x.uncertainty))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.id.data, _x.creation_time.secs, _x.creation_time.nsecs, _x.type, _x.uncertainty,) = _get_struct_3I2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_4f().unpack(str[start:end])
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I2B().pack(_x.id.data, _x.creation_time.secs, _x.creation_time.nsecs, _x.type, _x.uncertainty))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.id.data, _x.creation_time.secs, _x.creation_time.nsecs, _x.type, _x.uncertainty,) = _get_struct_3I2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_4f().unpack(str[start:end])
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I2B = None
def _get_struct_3I2B():
    global _struct_3I2B
    if _struct_3I2B is None:
        _struct_3I2B = struct.Struct("<3I2B")
    return _struct_3I2B
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
