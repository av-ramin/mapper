# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/LightCapability.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LightCapability(genpy.Message):
  _md5sum = "324c001d3c0f36b39a0b1a25c216ac00"
  _type = "agv_msgs/LightCapability"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
string desc_name
float64 min_duty_period
float64 min_freq
float64 max_freq
float64 min_duty
float64 max_duty
float64 default_freq
float64 default_duty
string topic"""
  __slots__ = ['name','desc_name','min_duty_period','min_freq','max_freq','min_duty','max_duty','default_freq','default_duty','topic']
  _slot_types = ['string','string','float64','float64','float64','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,desc_name,min_duty_period,min_freq,max_freq,min_duty,max_duty,default_freq,default_duty,topic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LightCapability, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.desc_name is None:
        self.desc_name = ''
      if self.min_duty_period is None:
        self.min_duty_period = 0.
      if self.min_freq is None:
        self.min_freq = 0.
      if self.max_freq is None:
        self.max_freq = 0.
      if self.min_duty is None:
        self.min_duty = 0.
      if self.max_duty is None:
        self.max_duty = 0.
      if self.default_freq is None:
        self.default_freq = 0.
      if self.default_duty is None:
        self.default_duty = 0.
      if self.topic is None:
        self.topic = ''
    else:
      self.name = ''
      self.desc_name = ''
      self.min_duty_period = 0.
      self.min_freq = 0.
      self.max_freq = 0.
      self.min_duty = 0.
      self.max_duty = 0.
      self.default_freq = 0.
      self.default_duty = 0.
      self.topic = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.desc_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.min_duty_period, _x.min_freq, _x.max_freq, _x.min_duty, _x.max_duty, _x.default_freq, _x.default_duty))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.desc_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.desc_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.min_duty_period, _x.min_freq, _x.max_freq, _x.min_duty, _x.max_duty, _x.default_freq, _x.default_duty,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.desc_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.min_duty_period, _x.min_freq, _x.max_freq, _x.min_duty, _x.max_duty, _x.default_freq, _x.default_duty))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.desc_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.desc_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.min_duty_period, _x.min_freq, _x.max_freq, _x.min_duty, _x.max_duty, _x.default_freq, _x.default_duty,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
