# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/RallyPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import genpy
import std_msgs.msg

class RallyPoint(genpy.Message):
  _md5sum = "35d2c36ca4d854de8711816e6db62eaf"
  _type = "agv_msgs/RallyPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/Waypoint point
agv_msgs/ID id
string name
uint16 priority
float32 radius
time creation_time
================================================================================
MSG: agv_msgs/Waypoint
Header header
agv_msgs/NavPose pose
agv_msgs/WaypointStatus status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: agv_msgs/NavPose
float64 x
float64 y
float64 z
float64 theta

uint8 type
uint8 UNKNOWN=0

================================================================================
MSG: agv_msgs/WaypointStatus
agv_msgs/ID goal_id
uint8 state # contins actionlib::SimpleClientGoalState state
float32 radius
bool road
bool intersection
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0
"""
  __slots__ = ['point','id','name','priority','radius','creation_time']
  _slot_types = ['agv_msgs/Waypoint','agv_msgs/ID','string','uint16','float32','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,id,name,priority,radius,creation_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RallyPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = agv_msgs.msg.Waypoint()
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.name is None:
        self.name = ''
      if self.priority is None:
        self.priority = 0
      if self.radius is None:
        self.radius = 0.
      if self.creation_time is None:
        self.creation_time = genpy.Time()
    else:
      self.point = agv_msgs.msg.Waypoint()
      self.id = agv_msgs.msg.ID()
      self.name = ''
      self.priority = 0
      self.radius = 0.
      self.creation_time = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.point.header.seq, _x.point.header.stamp.secs, _x.point.header.stamp.nsecs))
      _x = self.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dBIBf2BI().pack(_x.point.pose.x, _x.point.pose.y, _x.point.pose.z, _x.point.pose.theta, _x.point.pose.type, _x.point.status.goal_id.data, _x.point.status.state, _x.point.status.radius, _x.point.status.road, _x.point.status.intersection, _x.id.data))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf2I().pack(_x.priority, _x.radius, _x.creation_time.secs, _x.creation_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = agv_msgs.msg.Waypoint()
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.point.header.seq, _x.point.header.stamp.secs, _x.point.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.point.pose.x, _x.point.pose.y, _x.point.pose.z, _x.point.pose.theta, _x.point.pose.type, _x.point.status.goal_id.data, _x.point.status.state, _x.point.status.radius, _x.point.status.road, _x.point.status.intersection, _x.id.data,) = _get_struct_4dBIBf2BI().unpack(str[start:end])
      self.point.status.road = bool(self.point.status.road)
      self.point.status.intersection = bool(self.point.status.intersection)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.priority, _x.radius, _x.creation_time.secs, _x.creation_time.nsecs,) = _get_struct_Hf2I().unpack(str[start:end])
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.point.header.seq, _x.point.header.stamp.secs, _x.point.header.stamp.nsecs))
      _x = self.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dBIBf2BI().pack(_x.point.pose.x, _x.point.pose.y, _x.point.pose.z, _x.point.pose.theta, _x.point.pose.type, _x.point.status.goal_id.data, _x.point.status.state, _x.point.status.radius, _x.point.status.road, _x.point.status.intersection, _x.id.data))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf2I().pack(_x.priority, _x.radius, _x.creation_time.secs, _x.creation_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = agv_msgs.msg.Waypoint()
      if self.id is None:
        self.id = agv_msgs.msg.ID()
      if self.creation_time is None:
        self.creation_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.point.header.seq, _x.point.header.stamp.secs, _x.point.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.point.pose.x, _x.point.pose.y, _x.point.pose.z, _x.point.pose.theta, _x.point.pose.type, _x.point.status.goal_id.data, _x.point.status.state, _x.point.status.radius, _x.point.status.road, _x.point.status.intersection, _x.id.data,) = _get_struct_4dBIBf2BI().unpack(str[start:end])
      self.point.status.road = bool(self.point.status.road)
      self.point.status.intersection = bool(self.point.status.intersection)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.priority, _x.radius, _x.creation_time.secs, _x.creation_time.nsecs,) = _get_struct_Hf2I().unpack(str[start:end])
      self.creation_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4dBIBf2BI = None
def _get_struct_4dBIBf2BI():
    global _struct_4dBIBf2BI
    if _struct_4dBIBf2BI is None:
        _struct_4dBIBf2BI = struct.Struct("<4dBIBf2BI")
    return _struct_4dBIBf2BI
_struct_Hf2I = None
def _get_struct_Hf2I():
    global _struct_Hf2I
    if _struct_Hf2I is None:
        _struct_Hf2I = struct.Struct("<Hf2I")
    return _struct_Hf2I
