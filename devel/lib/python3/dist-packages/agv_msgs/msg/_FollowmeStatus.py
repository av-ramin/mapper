# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/FollowmeStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FollowmeStatus(genpy.Message):
  _md5sum = "352cd66af525f12fc4178354b47bfc2c"
  _type = "agv_msgs/FollowmeStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 distance_sp
float32 angle_sp
float32 live_distance
float32 live_angle
float32 velocity_limit
string chosen_tag_name
float32 dist_on_the_path
uint8 mode_indirect
bool start_active
bool pause_active
uint8 mode
uint8 DIRECT=1
uint8 INDIRECT=2
"""
  # Pseudo-constants
  DIRECT = 1
  INDIRECT = 2

  __slots__ = ['distance_sp','angle_sp','live_distance','live_angle','velocity_limit','chosen_tag_name','dist_on_the_path','mode_indirect','start_active','pause_active','mode']
  _slot_types = ['float32','float32','float32','float32','float32','string','float32','uint8','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance_sp,angle_sp,live_distance,live_angle,velocity_limit,chosen_tag_name,dist_on_the_path,mode_indirect,start_active,pause_active,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FollowmeStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.distance_sp is None:
        self.distance_sp = 0.
      if self.angle_sp is None:
        self.angle_sp = 0.
      if self.live_distance is None:
        self.live_distance = 0.
      if self.live_angle is None:
        self.live_angle = 0.
      if self.velocity_limit is None:
        self.velocity_limit = 0.
      if self.chosen_tag_name is None:
        self.chosen_tag_name = ''
      if self.dist_on_the_path is None:
        self.dist_on_the_path = 0.
      if self.mode_indirect is None:
        self.mode_indirect = 0
      if self.start_active is None:
        self.start_active = False
      if self.pause_active is None:
        self.pause_active = False
      if self.mode is None:
        self.mode = 0
    else:
      self.distance_sp = 0.
      self.angle_sp = 0.
      self.live_distance = 0.
      self.live_angle = 0.
      self.velocity_limit = 0.
      self.chosen_tag_name = ''
      self.dist_on_the_path = 0.
      self.mode_indirect = 0
      self.start_active = False
      self.pause_active = False
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.distance_sp, _x.angle_sp, _x.live_distance, _x.live_angle, _x.velocity_limit))
      _x = self.chosen_tag_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f4B().pack(_x.dist_on_the_path, _x.mode_indirect, _x.start_active, _x.pause_active, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.distance_sp, _x.angle_sp, _x.live_distance, _x.live_angle, _x.velocity_limit,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.chosen_tag_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.chosen_tag_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.dist_on_the_path, _x.mode_indirect, _x.start_active, _x.pause_active, _x.mode,) = _get_struct_f4B().unpack(str[start:end])
      self.start_active = bool(self.start_active)
      self.pause_active = bool(self.pause_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.distance_sp, _x.angle_sp, _x.live_distance, _x.live_angle, _x.velocity_limit))
      _x = self.chosen_tag_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f4B().pack(_x.dist_on_the_path, _x.mode_indirect, _x.start_active, _x.pause_active, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.distance_sp, _x.angle_sp, _x.live_distance, _x.live_angle, _x.velocity_limit,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.chosen_tag_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.chosen_tag_name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.dist_on_the_path, _x.mode_indirect, _x.start_active, _x.pause_active, _x.mode,) = _get_struct_f4B().unpack(str[start:end])
      self.start_active = bool(self.start_active)
      self.pause_active = bool(self.pause_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_f4B = None
def _get_struct_f4B():
    global _struct_f4B
    if _struct_f4B is None:
        _struct_f4B = struct.Struct("<f4B")
    return _struct_f4B
