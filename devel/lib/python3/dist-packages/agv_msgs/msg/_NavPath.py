# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_msgs/NavPath.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_msgs.msg
import genpy
import std_msgs.msg

class NavPath(genpy.Message):
  _md5sum = "6ab59b8885703109fbcdb3fa77299580"
  _type = "agv_msgs/NavPath"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agv_msgs/Waypoint[] waypoints
agv_msgs/NavPathInfo info
================================================================================
MSG: agv_msgs/Waypoint
Header header
agv_msgs/NavPose pose
agv_msgs/WaypointStatus status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: agv_msgs/NavPose
float64 x
float64 y
float64 z
float64 theta

uint8 type
uint8 UNKNOWN=0

================================================================================
MSG: agv_msgs/WaypointStatus
agv_msgs/ID goal_id
uint8 state # contins actionlib::SimpleClientGoalState state
float32 radius
bool road
bool intersection
================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: agv_msgs/NavPathInfo
agv_msgs/ID id
time creation_time

uint8 type
uint8 UNKNOWN=0
uint8 MANUAL=1
uint8 RECORDED=2
uint8 IMPORTED=3

uint8 uncertainty
uint8 OK=0
uint8 UNCERTAIN=1

string name
std_msgs/ColorRGBA color
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['waypoints','info']
  _slot_types = ['agv_msgs/Waypoint[]','agv_msgs/NavPathInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoints,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavPath, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.waypoints is None:
        self.waypoints = []
      if self.info is None:
        self.info = agv_msgs.msg.NavPathInfo()
    else:
      self.waypoints = []
      self.info = agv_msgs.msg.NavPathInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _x = _v3
        buff.write(_get_struct_4dB().pack(_x.x, _x.y, _x.z, _x.theta, _x.type))
        _v4 = val1.status
        _v5 = _v4.goal_id
        _x = _v5.data
        buff.write(_get_struct_I().pack(_x))
        _x = _v4
        buff.write(_get_struct_Bf2B().pack(_x.state, _x.radius, _x.road, _x.intersection))
      _x = self
      buff.write(_get_struct_3I2B().pack(_x.info.id.data, _x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.type, _x.info.uncertainty))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.info.color.r, _x.info.color.g, _x.info.color.b, _x.info.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.info is None:
        self.info = agv_msgs.msg.NavPathInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = agv_msgs.msg.Waypoint()
        _v6 = val1.header
        start = end
        end += 4
        (_v6.seq,) = _get_struct_I().unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v6.frame_id = str[start:end]
        _v8 = val1.pose
        _x = _v8
        start = end
        end += 33
        (_x.x, _x.y, _x.z, _x.theta, _x.type,) = _get_struct_4dB().unpack(str[start:end])
        _v9 = val1.status
        _v10 = _v9.goal_id
        start = end
        end += 4
        (_v10.data,) = _get_struct_I().unpack(str[start:end])
        _x = _v9
        start = end
        end += 7
        (_x.state, _x.radius, _x.road, _x.intersection,) = _get_struct_Bf2B().unpack(str[start:end])
        _v9.road = bool(_v9.road)
        _v9.intersection = bool(_v9.intersection)
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 14
      (_x.info.id.data, _x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.type, _x.info.uncertainty,) = _get_struct_3I2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.info.color.r, _x.info.color.g, _x.info.color.b, _x.info.color.a,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v11 = val1.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.pose
        _x = _v13
        buff.write(_get_struct_4dB().pack(_x.x, _x.y, _x.z, _x.theta, _x.type))
        _v14 = val1.status
        _v15 = _v14.goal_id
        _x = _v15.data
        buff.write(_get_struct_I().pack(_x))
        _x = _v14
        buff.write(_get_struct_Bf2B().pack(_x.state, _x.radius, _x.road, _x.intersection))
      _x = self
      buff.write(_get_struct_3I2B().pack(_x.info.id.data, _x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.type, _x.info.uncertainty))
      _x = self.info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.info.color.r, _x.info.color.g, _x.info.color.b, _x.info.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.info is None:
        self.info = agv_msgs.msg.NavPathInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = agv_msgs.msg.Waypoint()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.frame_id = str[start:end]
        _v18 = val1.pose
        _x = _v18
        start = end
        end += 33
        (_x.x, _x.y, _x.z, _x.theta, _x.type,) = _get_struct_4dB().unpack(str[start:end])
        _v19 = val1.status
        _v20 = _v19.goal_id
        start = end
        end += 4
        (_v20.data,) = _get_struct_I().unpack(str[start:end])
        _x = _v19
        start = end
        end += 7
        (_x.state, _x.radius, _x.road, _x.intersection,) = _get_struct_Bf2B().unpack(str[start:end])
        _v19.road = bool(_v19.road)
        _v19.intersection = bool(_v19.intersection)
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 14
      (_x.info.id.data, _x.info.creation_time.secs, _x.info.creation_time.nsecs, _x.info.type, _x.info.uncertainty,) = _get_struct_3I2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.info.color.r, _x.info.color.g, _x.info.color.b, _x.info.color.a,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I2B = None
def _get_struct_3I2B():
    global _struct_3I2B
    if _struct_3I2B is None:
        _struct_3I2B = struct.Struct("<3I2B")
    return _struct_3I2B
_struct_4dB = None
def _get_struct_4dB():
    global _struct_4dB
    if _struct_4dB is None:
        _struct_4dB = struct.Struct("<4dB")
    return _struct_4dB
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_Bf2B = None
def _get_struct_Bf2B():
    global _struct_Bf2B
    if _struct_Bf2B is None:
        _struct_Bf2B = struct.Struct("<Bf2B")
    return _struct_Bf2B
