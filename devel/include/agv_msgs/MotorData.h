// Generated by gencpp from file agv_msgs/MotorData.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_MOTORDATA_H
#define AGV_MSGS_MESSAGE_MOTORDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/EncoderData.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct MotorData_
{
  typedef MotorData_<ContainerAllocator> Type;

  MotorData_()
    : enc()
    , torque(0.0)
    , current(0.0)
    , voltage(0.0)
    , temperature(0.0)  {
    }
  MotorData_(const ContainerAllocator& _alloc)
    : enc(_alloc)
    , torque(0.0)
    , current(0.0)
    , voltage(0.0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::EncoderData_<ContainerAllocator>  _enc_type;
  _enc_type enc;

   typedef float _torque_type;
  _torque_type torque;

   typedef float _current_type;
  _current_type current;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::agv_msgs::MotorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::MotorData_<ContainerAllocator> const> ConstPtr;

}; // struct MotorData_

typedef ::agv_msgs::MotorData_<std::allocator<void> > MotorData;

typedef boost::shared_ptr< ::agv_msgs::MotorData > MotorDataPtr;
typedef boost::shared_ptr< ::agv_msgs::MotorData const> MotorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::MotorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::MotorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::MotorData_<ContainerAllocator1> & lhs, const ::agv_msgs::MotorData_<ContainerAllocator2> & rhs)
{
  return lhs.enc == rhs.enc &&
    lhs.torque == rhs.torque &&
    lhs.current == rhs.current &&
    lhs.voltage == rhs.voltage &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::MotorData_<ContainerAllocator1> & lhs, const ::agv_msgs::MotorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::MotorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::MotorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::MotorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::MotorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::MotorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::MotorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9f1240e471258014c99a0aa28d83052";
  }

  static const char* value(const ::agv_msgs::MotorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9f1240e47125801ULL;
  static const uint64_t static_value2 = 0x4c99a0aa28d83052ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/MotorData";
  }

  static const char* value(const ::agv_msgs::MotorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "EncoderData enc\n"
"float32 torque            # Nm\n"
"float32 current           # A\n"
"float32 voltage           # V\n"
"float32 temperature       # C\n"
"\n"
"# Some useful formulas for reference (use Si units)\n"
"# Mechanical power = torque * angular_velocity\n"
"# Electrical power = current * voltage\n"
"# Efficiency = mech. power / elec. power\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/EncoderData\n"
"float32 velocity\n"
"float32 distance\n"
"\n"
"uint8 units\n"
"uint8 RPM=0     # velocity in rpm,      distance in rotations\n"
"uint8 RAD_S=1   # velocity in rad/s,    distance in radians\n"
"uint8 M_S=2     # velocity in m/s,      distance in metres\n"
"uint8 TICKS=3   # velocity in ticks/s,  distance in ticks\n"
;
  }

  static const char* value(const ::agv_msgs::MotorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::MotorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enc);
      stream.next(m.torque);
      stream.next(m.current);
      stream.next(m.voltage);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::MotorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::MotorData_<ContainerAllocator>& v)
  {
    s << indent << "enc: ";
    s << std::endl;
    Printer< ::agv_msgs::EncoderData_<ContainerAllocator> >::stream(s, indent + "  ", v.enc);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_MOTORDATA_H
