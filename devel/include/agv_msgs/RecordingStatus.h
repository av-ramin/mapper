// Generated by gencpp from file agv_msgs/RecordingStatus.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_RECORDINGSTATUS_H
#define AGV_MSGS_MESSAGE_RECORDINGSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct RecordingStatus_
{
  typedef RecordingStatus_<ContainerAllocator> Type;

  RecordingStatus_()
    : header()
    , recorder_active(false)
    , bag_name()
    , bag_size_gb(0.0)
    , free_space_gb(0.0)  {
    }
  RecordingStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , recorder_active(false)
    , bag_name(_alloc)
    , bag_size_gb(0.0)
    , free_space_gb(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _recorder_active_type;
  _recorder_active_type recorder_active;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bag_name_type;
  _bag_name_type bag_name;

   typedef float _bag_size_gb_type;
  _bag_size_gb_type bag_size_gb;

   typedef float _free_space_gb_type;
  _free_space_gb_type free_space_gb;





  typedef boost::shared_ptr< ::agv_msgs::RecordingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::RecordingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RecordingStatus_

typedef ::agv_msgs::RecordingStatus_<std::allocator<void> > RecordingStatus;

typedef boost::shared_ptr< ::agv_msgs::RecordingStatus > RecordingStatusPtr;
typedef boost::shared_ptr< ::agv_msgs::RecordingStatus const> RecordingStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::RecordingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::RecordingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::RecordingStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::RecordingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.recorder_active == rhs.recorder_active &&
    lhs.bag_name == rhs.bag_name &&
    lhs.bag_size_gb == rhs.bag_size_gb &&
    lhs.free_space_gb == rhs.free_space_gb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::RecordingStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::RecordingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::RecordingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::RecordingStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::RecordingStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a17c53f7b4ef4b7bd3c1b923d7ae852";
  }

  static const char* value(const ::agv_msgs::RecordingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a17c53f7b4ef4b7ULL;
  static const uint64_t static_value2 = 0xbd3c1b923d7ae852ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/RecordingStatus";
  }

  static const char* value(const ::agv_msgs::RecordingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool recorder_active\n"
"string bag_name\n"
"float32 bag_size_gb\n"
"float32 free_space_gb\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::agv_msgs::RecordingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.recorder_active);
      stream.next(m.bag_name);
      stream.next(m.bag_size_gb);
      stream.next(m.free_space_gb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::RecordingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::RecordingStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "recorder_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recorder_active);
    s << indent << "bag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bag_name);
    s << indent << "bag_size_gb: ";
    Printer<float>::stream(s, indent + "  ", v.bag_size_gb);
    s << indent << "free_space_gb: ";
    Printer<float>::stream(s, indent + "  ", v.free_space_gb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_RECORDINGSTATUS_H
