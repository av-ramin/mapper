// Generated by gencpp from file agv_msgs/MissionProfile.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_MISSIONPROFILE_H
#define AGV_MSGS_MESSAGE_MISSIONPROFILE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>
#include <agv_msgs/NavigationConfig.h>
#include <agv_msgs/ID.h>
#include <agv_msgs/ID.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct MissionProfile_
{
  typedef MissionProfile_<ContainerAllocator> Type;

  MissionProfile_()
    : path_id()
    , config()
    , behaviors()
    , zones()  {
    }
  MissionProfile_(const ContainerAllocator& _alloc)
    : path_id(_alloc)
    , config(_alloc)
    , behaviors(_alloc)
    , zones(_alloc)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _path_id_type;
  _path_id_type path_id;

   typedef  ::agv_msgs::NavigationConfig_<ContainerAllocator>  _config_type;
  _config_type config;

   typedef std::vector< ::agv_msgs::ID_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::ID_<ContainerAllocator> >> _behaviors_type;
  _behaviors_type behaviors;

   typedef std::vector< ::agv_msgs::ID_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::ID_<ContainerAllocator> >> _zones_type;
  _zones_type zones;





  typedef boost::shared_ptr< ::agv_msgs::MissionProfile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::MissionProfile_<ContainerAllocator> const> ConstPtr;

}; // struct MissionProfile_

typedef ::agv_msgs::MissionProfile_<std::allocator<void> > MissionProfile;

typedef boost::shared_ptr< ::agv_msgs::MissionProfile > MissionProfilePtr;
typedef boost::shared_ptr< ::agv_msgs::MissionProfile const> MissionProfileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::MissionProfile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::MissionProfile_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::MissionProfile_<ContainerAllocator1> & lhs, const ::agv_msgs::MissionProfile_<ContainerAllocator2> & rhs)
{
  return lhs.path_id == rhs.path_id &&
    lhs.config == rhs.config &&
    lhs.behaviors == rhs.behaviors &&
    lhs.zones == rhs.zones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::MissionProfile_<ContainerAllocator1> & lhs, const ::agv_msgs::MissionProfile_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::MissionProfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::MissionProfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::MissionProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::MissionProfile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::MissionProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::MissionProfile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::MissionProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bafac555455751c88b658e71984a8344";
  }

  static const char* value(const ::agv_msgs::MissionProfile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbafac555455751c8ULL;
  static const uint64_t static_value2 = 0x8b658e71984a8344ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::MissionProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/MissionProfile";
  }

  static const char* value(const ::agv_msgs::MissionProfile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::MissionProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID path_id\n"
"agv_msgs/NavigationConfig config\n"
"agv_msgs/ID[] behaviors\n"
"agv_msgs/ID[] zones\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/NavigationConfig\n"
"uint8 direction\n"
"uint8 DIR_FORWARD=0\n"
"uint8 DIR_CLOCKWISE=0\n"
"uint8 DIR_REVERSE=1\n"
"uint8 DIR_COUNTERCLOCKWISE=1\n"
"\n"
"uint8 repeat_mode\n"
"uint8 REPEAT_NONE=0\n"
"uint8 REPEAT_CIRCULAR=1\n"
"uint8 REPEAT_DOUBLE_BACK=2\n"
"\n"
"uint16 no_of_loops\n"
"uint8 INFINITE_LOOPS = 0\n"
"uint8 SINGLE_EXECUTION = 1\n"
;
  }

  static const char* value(const ::agv_msgs::MissionProfile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::MissionProfile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_id);
      stream.next(m.config);
      stream.next(m.behaviors);
      stream.next(m.zones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionProfile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::MissionProfile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::MissionProfile_<ContainerAllocator>& v)
  {
    s << indent << "path_id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.path_id);
    s << indent << "config: ";
    s << std::endl;
    Printer< ::agv_msgs::NavigationConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.config);
    s << indent << "behaviors[]" << std::endl;
    for (size_t i = 0; i < v.behaviors.size(); ++i)
    {
      s << indent << "  behaviors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "    ", v.behaviors[i]);
    }
    s << indent << "zones[]" << std::endl;
    for (size_t i = 0; i < v.zones.size(); ++i)
    {
      s << indent << "  zones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "    ", v.zones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_MISSIONPROFILE_H
