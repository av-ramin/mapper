// Generated by gencpp from file agv_msgs/NavPath.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_NAVPATH_H
#define AGV_MSGS_MESSAGE_NAVPATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/Waypoint.h>
#include <agv_msgs/NavPathInfo.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct NavPath_
{
  typedef NavPath_<ContainerAllocator> Type;

  NavPath_()
    : waypoints()
    , info()  {
    }
  NavPath_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::agv_msgs::Waypoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::Waypoint_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;

   typedef  ::agv_msgs::NavPathInfo_<ContainerAllocator>  _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::agv_msgs::NavPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::NavPath_<ContainerAllocator> const> ConstPtr;

}; // struct NavPath_

typedef ::agv_msgs::NavPath_<std::allocator<void> > NavPath;

typedef boost::shared_ptr< ::agv_msgs::NavPath > NavPathPtr;
typedef boost::shared_ptr< ::agv_msgs::NavPath const> NavPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::NavPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::NavPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::NavPath_<ContainerAllocator1> & lhs, const ::agv_msgs::NavPath_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::NavPath_<ContainerAllocator1> & lhs, const ::agv_msgs::NavPath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::NavPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ab59b8885703109fbcdb3fa77299580";
  }

  static const char* value(const ::agv_msgs::NavPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ab59b8885703109ULL;
  static const uint64_t static_value2 = 0xfbcdb3fa77299580ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::NavPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/NavPath";
  }

  static const char* value(const ::agv_msgs::NavPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::NavPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Waypoint[] waypoints\n"
"agv_msgs/NavPathInfo info\n"
"================================================================================\n"
"MSG: agv_msgs/Waypoint\n"
"Header header\n"
"agv_msgs/NavPose pose\n"
"agv_msgs/WaypointStatus status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/NavPose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/WaypointStatus\n"
"agv_msgs/ID goal_id\n"
"uint8 state # contins actionlib::SimpleClientGoalState state\n"
"float32 radius\n"
"bool road\n"
"bool intersection\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/NavPathInfo\n"
"agv_msgs/ID id\n"
"time creation_time\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"uint8 MANUAL=1\n"
"uint8 RECORDED=2\n"
"uint8 IMPORTED=3\n"
"\n"
"uint8 uncertainty\n"
"uint8 OK=0\n"
"uint8 UNCERTAIN=1\n"
"\n"
"string name\n"
"std_msgs/ColorRGBA color\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::agv_msgs::NavPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::NavPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::NavPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::NavPath_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "info: ";
    s << std::endl;
    Printer< ::agv_msgs::NavPathInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_NAVPATH_H
