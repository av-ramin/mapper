// Generated by gencpp from file agv_msgs/WaypointStatus.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_WAYPOINTSTATUS_H
#define AGV_MSGS_MESSAGE_WAYPOINTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct WaypointStatus_
{
  typedef WaypointStatus_<ContainerAllocator> Type;

  WaypointStatus_()
    : goal_id()
    , state(0)
    , radius(0.0)
    , road(false)
    , intersection(false)  {
    }
  WaypointStatus_(const ContainerAllocator& _alloc)
    : goal_id(_alloc)
    , state(0)
    , radius(0.0)
    , road(false)
    , intersection(false)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef uint8_t _state_type;
  _state_type state;

   typedef float _radius_type;
  _radius_type radius;

   typedef uint8_t _road_type;
  _road_type road;

   typedef uint8_t _intersection_type;
  _intersection_type intersection;





  typedef boost::shared_ptr< ::agv_msgs::WaypointStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::WaypointStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointStatus_

typedef ::agv_msgs::WaypointStatus_<std::allocator<void> > WaypointStatus;

typedef boost::shared_ptr< ::agv_msgs::WaypointStatus > WaypointStatusPtr;
typedef boost::shared_ptr< ::agv_msgs::WaypointStatus const> WaypointStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::WaypointStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::WaypointStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::WaypointStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::WaypointStatus_<ContainerAllocator2> & rhs)
{
  return lhs.goal_id == rhs.goal_id &&
    lhs.state == rhs.state &&
    lhs.radius == rhs.radius &&
    lhs.road == rhs.road &&
    lhs.intersection == rhs.intersection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::WaypointStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::WaypointStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::WaypointStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::WaypointStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::WaypointStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62191f205a4471b269c61732e2f09cee";
  }

  static const char* value(const ::agv_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62191f205a4471b2ULL;
  static const uint64_t static_value2 = 0x69c61732e2f09ceeULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/WaypointStatus";
  }

  static const char* value(const ::agv_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID goal_id\n"
"uint8 state # contins actionlib::SimpleClientGoalState state\n"
"float32 radius\n"
"bool road\n"
"bool intersection\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
;
  }

  static const char* value(const ::agv_msgs::WaypointStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_id);
      stream.next(m.state);
      stream.next(m.radius);
      stream.next(m.road);
      stream.next(m.intersection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::WaypointStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::WaypointStatus_<ContainerAllocator>& v)
  {
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "road: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.road);
    s << indent << "intersection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.intersection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_WAYPOINTSTATUS_H
