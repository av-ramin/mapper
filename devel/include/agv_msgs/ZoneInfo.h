// Generated by gencpp from file agv_msgs/ZoneInfo.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_ZONEINFO_H
#define AGV_MSGS_MESSAGE_ZONEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>
#include <std_msgs/ColorRGBA.h>
#include <agv_msgs/KeyValue.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct ZoneInfo_
{
  typedef ZoneInfo_<ContainerAllocator> Type;

  ZoneInfo_()
    : id()
    , group()
    , name()
    , color()
    , properties()
    , visible(false)
    , creation_time()  {
    }
  ZoneInfo_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , group(_alloc)
    , name(_alloc)
    , color(_alloc)
    , properties(_alloc)
    , visible(false)
    , creation_time()  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef std::vector< ::agv_msgs::KeyValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::KeyValue_<ContainerAllocator> >> _properties_type;
  _properties_type properties;

   typedef uint8_t _visible_type;
  _visible_type visible;

   typedef ros::Time _creation_time_type;
  _creation_time_type creation_time;





  typedef boost::shared_ptr< ::agv_msgs::ZoneInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::ZoneInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ZoneInfo_

typedef ::agv_msgs::ZoneInfo_<std::allocator<void> > ZoneInfo;

typedef boost::shared_ptr< ::agv_msgs::ZoneInfo > ZoneInfoPtr;
typedef boost::shared_ptr< ::agv_msgs::ZoneInfo const> ZoneInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::ZoneInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::ZoneInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::ZoneInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::ZoneInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.group == rhs.group &&
    lhs.name == rhs.name &&
    lhs.color == rhs.color &&
    lhs.properties == rhs.properties &&
    lhs.visible == rhs.visible &&
    lhs.creation_time == rhs.creation_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::ZoneInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::ZoneInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::ZoneInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::ZoneInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::ZoneInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23fe4a88c361ecd57494678a1faa3171";
  }

  static const char* value(const ::agv_msgs::ZoneInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23fe4a88c361ecd5ULL;
  static const uint64_t static_value2 = 0x7494678a1faa3171ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ZoneInfo";
  }

  static const char* value(const ::agv_msgs::ZoneInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID id\n"
"string group\n"
"string name\n"
"std_msgs/ColorRGBA color\n"
"agv_msgs/KeyValue[] properties\n"
"bool visible\n"
"time creation_time\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::agv_msgs::ZoneInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.group);
      stream.next(m.name);
      stream.next(m.color);
      stream.next(m.properties);
      stream.next(m.visible);
      stream.next(m.creation_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ZoneInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::ZoneInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::ZoneInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "creation_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.creation_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_ZONEINFO_H
