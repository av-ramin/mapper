// Generated by gencpp from file agv_msgs/ID.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_ID_H
#define AGV_MSGS_MESSAGE_ID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct ID_
{
  typedef ID_<ContainerAllocator> Type;

  ID_()
    : data(0)  {
    }
  ID_(const ContainerAllocator& _alloc)
    : data(0)  {
  (void)_alloc;
    }



   typedef uint32_t _data_type;
  _data_type data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INVALID_ID)
  #undef INVALID_ID
#endif

  enum {
    INVALID_ID = 0u,
  };


  typedef boost::shared_ptr< ::agv_msgs::ID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::ID_<ContainerAllocator> const> ConstPtr;

}; // struct ID_

typedef ::agv_msgs::ID_<std::allocator<void> > ID;

typedef boost::shared_ptr< ::agv_msgs::ID > IDPtr;
typedef boost::shared_ptr< ::agv_msgs::ID const> IDConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::ID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::ID_<ContainerAllocator1> & lhs, const ::agv_msgs::ID_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::ID_<ContainerAllocator1> & lhs, const ::agv_msgs::ID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::ID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::ID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::ID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::ID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::ID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::ID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13c6eee13b62c0e3ecc8410f8dd0a003";
  }

  static const char* value(const ::agv_msgs::ID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13c6eee13b62c0e3ULL;
  static const uint64_t static_value2 = 0xecc8410f8dd0a003ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID";
  }

  static const char* value(const ::agv_msgs::ID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return " uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
;
  }

  static const char* value(const ::agv_msgs::ID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::ID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::ID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::ID_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_ID_H
