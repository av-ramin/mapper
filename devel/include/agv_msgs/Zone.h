// Generated by gencpp from file agv_msgs/Zone.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_ZONE_H
#define AGV_MSGS_MESSAGE_ZONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ZoneInfo.h>
#include <agv_msgs/ZoneShape.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct Zone_
{
  typedef Zone_<ContainerAllocator> Type;

  Zone_()
    : info()
    , shape()  {
    }
  Zone_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , shape(_alloc)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ZoneInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef  ::agv_msgs::ZoneShape_<ContainerAllocator>  _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::agv_msgs::Zone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::Zone_<ContainerAllocator> const> ConstPtr;

}; // struct Zone_

typedef ::agv_msgs::Zone_<std::allocator<void> > Zone;

typedef boost::shared_ptr< ::agv_msgs::Zone > ZonePtr;
typedef boost::shared_ptr< ::agv_msgs::Zone const> ZoneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::Zone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::Zone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::Zone_<ContainerAllocator1> & lhs, const ::agv_msgs::Zone_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::Zone_<ContainerAllocator1> & lhs, const ::agv_msgs::Zone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Zone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Zone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Zone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Zone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Zone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Zone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::Zone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5040c20424776948eebc0958029800d6";
  }

  static const char* value(const ::agv_msgs::Zone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5040c20424776948ULL;
  static const uint64_t static_value2 = 0xeebc0958029800d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::Zone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Zone";
  }

  static const char* value(const ::agv_msgs::Zone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::Zone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ZoneInfo info\n"
"agv_msgs/ZoneShape shape \n"
"================================================================================\n"
"MSG: agv_msgs/ZoneInfo\n"
"agv_msgs/ID id\n"
"string group\n"
"string name\n"
"std_msgs/ColorRGBA color\n"
"agv_msgs/KeyValue[] properties\n"
"bool visible\n"
"time creation_time\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/KeyValue\n"
"string key\n"
"string value\n"
"================================================================================\n"
"MSG: agv_msgs/ZoneShape\n"
"string frame_id\n"
"geometry_msgs/Point32[] points\n"
"float32 radius\n"
"\n"
"uint8 type\n"
"uint8 INVALID = 0\n"
"uint8 POLYGON = 1\n"
"uint8 RADIUS = 2 \n"
"uint8 BARRIER = 3  \n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::agv_msgs::Zone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::Zone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Zone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::Zone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::Zone_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::agv_msgs::ZoneInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::agv_msgs::ZoneShape_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_ZONE_H
