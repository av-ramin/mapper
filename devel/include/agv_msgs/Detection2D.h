// Generated by gencpp from file agv_msgs/Detection2D.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_DETECTION2D_H
#define AGV_MSGS_MESSAGE_DETECTION2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct Detection2D_
{
  typedef Detection2D_<ContainerAllocator> Type;

  Detection2D_()
    : class_id(0)
    , class_name()
    , probability(0.0)
    , track_id(0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , yaw_hor(0.0)
    , yaw_hor_dev(0.0)
    , yaw_ver(0.0)
    , yaw_ver_dev(0.0)
    , dist(0.0)
    , dist_dev(0.0)  {
    }
  Detection2D_(const ContainerAllocator& _alloc)
    : class_id(0)
    , class_name(_alloc)
    , probability(0.0)
    , track_id(0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , yaw_hor(0.0)
    , yaw_hor_dev(0.0)
    , yaw_ver(0.0)
    , yaw_ver_dev(0.0)
    , dist(0.0)
    , dist_dev(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef float _probability_type;
  _probability_type probability;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef uint32_t _xmin_type;
  _xmin_type xmin;

   typedef uint32_t _ymin_type;
  _ymin_type ymin;

   typedef uint32_t _xmax_type;
  _xmax_type xmax;

   typedef uint32_t _ymax_type;
  _ymax_type ymax;

   typedef float _yaw_hor_type;
  _yaw_hor_type yaw_hor;

   typedef float _yaw_hor_dev_type;
  _yaw_hor_dev_type yaw_hor_dev;

   typedef float _yaw_ver_type;
  _yaw_ver_type yaw_ver;

   typedef float _yaw_ver_dev_type;
  _yaw_ver_dev_type yaw_ver_dev;

   typedef float _dist_type;
  _dist_type dist;

   typedef float _dist_dev_type;
  _dist_dev_type dist_dev;





  typedef boost::shared_ptr< ::agv_msgs::Detection2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::Detection2D_<ContainerAllocator> const> ConstPtr;

}; // struct Detection2D_

typedef ::agv_msgs::Detection2D_<std::allocator<void> > Detection2D;

typedef boost::shared_ptr< ::agv_msgs::Detection2D > Detection2DPtr;
typedef boost::shared_ptr< ::agv_msgs::Detection2D const> Detection2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::Detection2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::Detection2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::Detection2D_<ContainerAllocator1> & lhs, const ::agv_msgs::Detection2D_<ContainerAllocator2> & rhs)
{
  return lhs.class_id == rhs.class_id &&
    lhs.class_name == rhs.class_name &&
    lhs.probability == rhs.probability &&
    lhs.track_id == rhs.track_id &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.yaw_hor == rhs.yaw_hor &&
    lhs.yaw_hor_dev == rhs.yaw_hor_dev &&
    lhs.yaw_ver == rhs.yaw_ver &&
    lhs.yaw_ver_dev == rhs.yaw_ver_dev &&
    lhs.dist == rhs.dist &&
    lhs.dist_dev == rhs.dist_dev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::Detection2D_<ContainerAllocator1> & lhs, const ::agv_msgs::Detection2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Detection2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Detection2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Detection2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Detection2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Detection2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Detection2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "828b4a851eb90a71558f422ff404dc24";
  }

  static const char* value(const ::agv_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x828b4a851eb90a71ULL;
  static const uint64_t static_value2 = 0x558f422ff404dc24ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Detection2D";
  }

  static const char* value(const ::agv_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 class_id\n"
"string class_name\n"
"float32 probability\n"
"int32 track_id\n"
"uint32 xmin\n"
"uint32 ymin\n"
"uint32 xmax\n"
"uint32 ymax\n"
"float32 yaw_hor\n"
"float32 yaw_hor_dev\n"
"float32 yaw_ver\n"
"float32 yaw_ver_dev\n"
"float32 dist\n"
"float32 dist_dev\n"
;
  }

  static const char* value(const ::agv_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::Detection2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.class_name);
      stream.next(m.probability);
      stream.next(m.track_id);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.yaw_hor);
      stream.next(m.yaw_hor_dev);
      stream.next(m.yaw_ver);
      stream.next(m.yaw_ver_dev);
      stream.next(m.dist);
      stream.next(m.dist_dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::Detection2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::Detection2D_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "xmin: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "yaw_hor: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_hor);
    s << indent << "yaw_hor_dev: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_hor_dev);
    s << indent << "yaw_ver: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_ver);
    s << indent << "yaw_ver_dev: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_ver_dev);
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    s << indent << "dist_dev: ";
    Printer<float>::stream(s, indent + "  ", v.dist_dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_DETECTION2D_H
