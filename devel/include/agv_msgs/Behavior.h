// Generated by gencpp from file agv_msgs/Behavior.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_BEHAVIOR_H
#define AGV_MSGS_MESSAGE_BEHAVIOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/BehaviorInfo.h>
#include <agv_msgs/KeyValue.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct Behavior_
{
  typedef Behavior_<ContainerAllocator> Type;

  Behavior_()
    : info()
    , properties()  {
    }
  Behavior_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::BehaviorInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef std::vector< ::agv_msgs::KeyValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::KeyValue_<ContainerAllocator> >> _properties_type;
  _properties_type properties;





  typedef boost::shared_ptr< ::agv_msgs::Behavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::Behavior_<ContainerAllocator> const> ConstPtr;

}; // struct Behavior_

typedef ::agv_msgs::Behavior_<std::allocator<void> > Behavior;

typedef boost::shared_ptr< ::agv_msgs::Behavior > BehaviorPtr;
typedef boost::shared_ptr< ::agv_msgs::Behavior const> BehaviorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::Behavior_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::Behavior_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::Behavior_<ContainerAllocator1> & lhs, const ::agv_msgs::Behavior_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::Behavior_<ContainerAllocator1> & lhs, const ::agv_msgs::Behavior_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Behavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Behavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Behavior_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Behavior_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Behavior_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Behavior_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::Behavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ead27a2d6e2bdcc7f79010ccab812ae7";
  }

  static const char* value(const ::agv_msgs::Behavior_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xead27a2d6e2bdcc7ULL;
  static const uint64_t static_value2 = 0xf79010ccab812ae7ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::Behavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Behavior";
  }

  static const char* value(const ::agv_msgs::Behavior_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::Behavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/BehaviorInfo info\n"
"agv_msgs/KeyValue[] properties\n"
"================================================================================\n"
"MSG: agv_msgs/BehaviorInfo\n"
"agv_msgs/ID id\n"
"string name\n"
"uint16 priority\n"
"bool enabled\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::agv_msgs::Behavior_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::Behavior_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Behavior_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::Behavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::Behavior_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_BEHAVIOR_H
