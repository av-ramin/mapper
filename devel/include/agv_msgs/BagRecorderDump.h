// Generated by gencpp from file agv_msgs/BagRecorderDump.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_BAGRECORDERDUMP_H
#define AGV_MSGS_MESSAGE_BAGRECORDERDUMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct BagRecorderDump_
{
  typedef BagRecorderDump_<ContainerAllocator> Type;

  BagRecorderDump_()
    : id()
    , label()
    , size(0)
    , files()  {
    }
  BagRecorderDump_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , label(_alloc)
    , size(0)
    , files(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef int64_t _size_type;
  _size_type size;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _files_type;
  _files_type files;





  typedef boost::shared_ptr< ::agv_msgs::BagRecorderDump_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::BagRecorderDump_<ContainerAllocator> const> ConstPtr;

}; // struct BagRecorderDump_

typedef ::agv_msgs::BagRecorderDump_<std::allocator<void> > BagRecorderDump;

typedef boost::shared_ptr< ::agv_msgs::BagRecorderDump > BagRecorderDumpPtr;
typedef boost::shared_ptr< ::agv_msgs::BagRecorderDump const> BagRecorderDumpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::BagRecorderDump_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::BagRecorderDump_<ContainerAllocator1> & lhs, const ::agv_msgs::BagRecorderDump_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.label == rhs.label &&
    lhs.size == rhs.size &&
    lhs.files == rhs.files;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::BagRecorderDump_<ContainerAllocator1> & lhs, const ::agv_msgs::BagRecorderDump_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BagRecorderDump_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BagRecorderDump_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BagRecorderDump_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aeb2667881e632e7b14a92b87d768564";
  }

  static const char* value(const ::agv_msgs::BagRecorderDump_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaeb2667881e632e7ULL;
  static const uint64_t static_value2 = 0xb14a92b87d768564ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/BagRecorderDump";
  }

  static const char* value(const ::agv_msgs::BagRecorderDump_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string label\n"
"int64 size\n"
"string[] files\n"
;
  }

  static const char* value(const ::agv_msgs::BagRecorderDump_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.label);
      stream.next(m.size);
      stream.next(m.files);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BagRecorderDump_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::BagRecorderDump_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::BagRecorderDump_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.size);
    s << indent << "files[]" << std::endl;
    for (size_t i = 0; i < v.files.size(); ++i)
    {
      s << indent << "  files[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.files[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_BAGRECORDERDUMP_H
