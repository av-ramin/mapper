// Generated by gencpp from file agv_msgs/BehaviorInfo.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_BEHAVIORINFO_H
#define AGV_MSGS_MESSAGE_BEHAVIORINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct BehaviorInfo_
{
  typedef BehaviorInfo_<ContainerAllocator> Type;

  BehaviorInfo_()
    : id()
    , name()
    , priority(0)
    , enabled(false)  {
    }
  BehaviorInfo_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , name(_alloc)
    , priority(0)
    , enabled(false)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint16_t _priority_type;
  _priority_type priority;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::agv_msgs::BehaviorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::BehaviorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorInfo_

typedef ::agv_msgs::BehaviorInfo_<std::allocator<void> > BehaviorInfo;

typedef boost::shared_ptr< ::agv_msgs::BehaviorInfo > BehaviorInfoPtr;
typedef boost::shared_ptr< ::agv_msgs::BehaviorInfo const> BehaviorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::BehaviorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::BehaviorInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::BehaviorInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.priority == rhs.priority &&
    lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::BehaviorInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::BehaviorInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BehaviorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BehaviorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BehaviorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8711bc09b068bdf072c07edaec200c9";
  }

  static const char* value(const ::agv_msgs::BehaviorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8711bc09b068bdfULL;
  static const uint64_t static_value2 = 0x072c07edaec200c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/BehaviorInfo";
  }

  static const char* value(const ::agv_msgs::BehaviorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID id\n"
"string name\n"
"uint16 priority\n"
"bool enabled\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
;
  }

  static const char* value(const ::agv_msgs::BehaviorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.priority);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::BehaviorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::BehaviorInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "priority: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.priority);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_BEHAVIORINFO_H
