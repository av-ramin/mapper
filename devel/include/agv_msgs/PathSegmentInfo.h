// Generated by gencpp from file agv_msgs/PathSegmentInfo.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_PATHSEGMENTINFO_H
#define AGV_MSGS_MESSAGE_PATHSEGMENTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct PathSegmentInfo_
{
  typedef PathSegmentInfo_<ContainerAllocator> Type;

  PathSegmentInfo_()
    : id()
    , type(0)
    , name()
    , color()  {
      color.assign(0);
  }
  PathSegmentInfo_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(0)
    , name(_alloc)
    , color()  {
  (void)_alloc;
      color.assign(0);
  }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef boost::array<uint8_t, 4>  _color_type;
  _color_type color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    UNKNOWN = 0u,
  };


  typedef boost::shared_ptr< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> const> ConstPtr;

}; // struct PathSegmentInfo_

typedef ::agv_msgs::PathSegmentInfo_<std::allocator<void> > PathSegmentInfo;

typedef boost::shared_ptr< ::agv_msgs::PathSegmentInfo > PathSegmentInfoPtr;
typedef boost::shared_ptr< ::agv_msgs::PathSegmentInfo const> PathSegmentInfoConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::PathSegmentInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::PathSegmentInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::PathSegmentInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.name == rhs.name &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::PathSegmentInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::PathSegmentInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c9bb7ab00e46283462814c46c76dfc4";
  }

  static const char* value(const ::agv_msgs::PathSegmentInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c9bb7ab00e46283ULL;
  static const uint64_t static_value2 = 0x462814c46c76dfc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/PathSegmentInfo";
  }

  static const char* value(const ::agv_msgs::PathSegmentInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID id\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"\n"
"string name\n"
"uint8[4] color\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
;
  }

  static const char* value(const ::agv_msgs::PathSegmentInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathSegmentInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::PathSegmentInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.color[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_PATHSEGMENTINFO_H
