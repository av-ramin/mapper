// Generated by gencpp from file agv_msgs/HumanPoseControlStamped.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_HUMANPOSECONTROLSTAMPED_H
#define AGV_MSGS_MESSAGE_HUMANPOSECONTROLSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <agv_msgs/HumanPose.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct HumanPoseControlStamped_
{
  typedef HumanPoseControlStamped_<ContainerAllocator> Type;

  HumanPoseControlStamped_()
    : header()
    , status(0)
    , classification(0)
    , pose()  {
    }
  HumanPoseControlStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , classification(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _classification_type;
  _classification_type classification;

   typedef  ::agv_msgs::HumanPose_<ContainerAllocator>  _pose_type;
  _pose_type pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POSE_LOCK_IDLE)
  #undef POSE_LOCK_IDLE
#endif
#if defined(_WIN32) && defined(POSE_LOCK_START)
  #undef POSE_LOCK_START
#endif
#if defined(_WIN32) && defined(POSE_LOCK)
  #undef POSE_LOCK
#endif
#if defined(_WIN32) && defined(POSE_LEFT)
  #undef POSE_LEFT
#endif
#if defined(_WIN32) && defined(POSE_RIGHT)
  #undef POSE_RIGHT
#endif
#if defined(_WIN32) && defined(POSE_START)
  #undef POSE_START
#endif
#if defined(_WIN32) && defined(POSE_REVERSE)
  #undef POSE_REVERSE
#endif
#if defined(_WIN32) && defined(POSE_STOP)
  #undef POSE_STOP
#endif
#if defined(_WIN32) && defined(POSE_ELSE)
  #undef POSE_ELSE
#endif

  enum {
    POSE_LOCK_IDLE = 0u,
    POSE_LOCK_START = 1u,
    POSE_LOCK = 2u,
    POSE_LEFT = 0u,
    POSE_RIGHT = 1u,
    POSE_START = 2u,
    POSE_REVERSE = 3u,
    POSE_STOP = 4u,
    POSE_ELSE = 5u,
  };


  typedef boost::shared_ptr< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> const> ConstPtr;

}; // struct HumanPoseControlStamped_

typedef ::agv_msgs::HumanPoseControlStamped_<std::allocator<void> > HumanPoseControlStamped;

typedef boost::shared_ptr< ::agv_msgs::HumanPoseControlStamped > HumanPoseControlStampedPtr;
typedef boost::shared_ptr< ::agv_msgs::HumanPoseControlStamped const> HumanPoseControlStampedConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator1> & lhs, const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.classification == rhs.classification &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator1> & lhs, const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e84d4a1761d7f7291a8bf764334c8d98";
  }

  static const char* value(const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe84d4a1761d7f729ULL;
  static const uint64_t static_value2 = 0x1a8bf764334c8d98ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/HumanPoseControlStamped";
  }

  static const char* value(const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 status\n"
"uint8 POSE_LOCK_IDLE = 0\n"
"uint8 POSE_LOCK_START = 1\n"
"uint8 POSE_LOCK = 2\n"
"\n"
"uint8 classification\n"
"uint8 POSE_LEFT = 0\n"
"uint8 POSE_RIGHT = 1\n"
"uint8 POSE_START = 2\n"
"uint8 POSE_REVERSE = 3\n"
"uint8 POSE_STOP = 4\n"
"uint8 POSE_ELSE = 5\n"
"\n"
"HumanPose pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/HumanPose\n"
"geometry_msgs/Pose2D[] pose_points\n"
"float64 score\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.classification);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanPoseControlStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::HumanPoseControlStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::agv_msgs::HumanPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_HUMANPOSECONTROLSTAMPED_H
