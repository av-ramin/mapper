// Generated by gencpp from file agv_msgs/RallyPoint.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_RALLYPOINT_H
#define AGV_MSGS_MESSAGE_RALLYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/Waypoint.h>
#include <agv_msgs/ID.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct RallyPoint_
{
  typedef RallyPoint_<ContainerAllocator> Type;

  RallyPoint_()
    : point()
    , id()
    , name()
    , priority(0)
    , radius(0.0)
    , creation_time()  {
    }
  RallyPoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , id(_alloc)
    , name(_alloc)
    , priority(0)
    , radius(0.0)
    , creation_time()  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::Waypoint_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::agv_msgs::ID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint16_t _priority_type;
  _priority_type priority;

   typedef float _radius_type;
  _radius_type radius;

   typedef ros::Time _creation_time_type;
  _creation_time_type creation_time;





  typedef boost::shared_ptr< ::agv_msgs::RallyPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::RallyPoint_<ContainerAllocator> const> ConstPtr;

}; // struct RallyPoint_

typedef ::agv_msgs::RallyPoint_<std::allocator<void> > RallyPoint;

typedef boost::shared_ptr< ::agv_msgs::RallyPoint > RallyPointPtr;
typedef boost::shared_ptr< ::agv_msgs::RallyPoint const> RallyPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::RallyPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::RallyPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::RallyPoint_<ContainerAllocator1> & lhs, const ::agv_msgs::RallyPoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.priority == rhs.priority &&
    lhs.radius == rhs.radius &&
    lhs.creation_time == rhs.creation_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::RallyPoint_<ContainerAllocator1> & lhs, const ::agv_msgs::RallyPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::RallyPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::RallyPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::RallyPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::RallyPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::RallyPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::RallyPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::RallyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35d2c36ca4d854de8711816e6db62eaf";
  }

  static const char* value(const ::agv_msgs::RallyPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35d2c36ca4d854deULL;
  static const uint64_t static_value2 = 0x8711816e6db62eafULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::RallyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/RallyPoint";
  }

  static const char* value(const ::agv_msgs::RallyPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::RallyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Waypoint point\n"
"agv_msgs/ID id\n"
"string name\n"
"uint16 priority\n"
"float32 radius\n"
"time creation_time\n"
"================================================================================\n"
"MSG: agv_msgs/Waypoint\n"
"Header header\n"
"agv_msgs/NavPose pose\n"
"agv_msgs/WaypointStatus status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/NavPose\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 theta\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/WaypointStatus\n"
"agv_msgs/ID goal_id\n"
"uint8 state # contins actionlib::SimpleClientGoalState state\n"
"float32 radius\n"
"bool road\n"
"bool intersection\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
;
  }

  static const char* value(const ::agv_msgs::RallyPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::RallyPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.priority);
      stream.next(m.radius);
      stream.next(m.creation_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RallyPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::RallyPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::RallyPoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::agv_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "priority: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.priority);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "creation_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.creation_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_RALLYPOINT_H
