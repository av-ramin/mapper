// Generated by gencpp from file agv_msgs/FollowmeTagStatus.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_FOLLOWMETAGSTATUS_H
#define AGV_MSGS_MESSAGE_FOLLOWMETAGSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct FollowmeTagStatus_
{
  typedef FollowmeTagStatus_<ContainerAllocator> Type;

  FollowmeTagStatus_()
    : dist_to_anchor(0.0)
    , battery_lvl(0)
    , signal_quality(0)  {
    }
  FollowmeTagStatus_(const ContainerAllocator& _alloc)
    : dist_to_anchor(0.0)
    , battery_lvl(0)
    , signal_quality(0)  {
  (void)_alloc;
    }



   typedef float _dist_to_anchor_type;
  _dist_to_anchor_type dist_to_anchor;

   typedef uint8_t _battery_lvl_type;
  _battery_lvl_type battery_lvl;

   typedef uint8_t _signal_quality_type;
  _signal_quality_type signal_quality;





  typedef boost::shared_ptr< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FollowmeTagStatus_

typedef ::agv_msgs::FollowmeTagStatus_<std::allocator<void> > FollowmeTagStatus;

typedef boost::shared_ptr< ::agv_msgs::FollowmeTagStatus > FollowmeTagStatusPtr;
typedef boost::shared_ptr< ::agv_msgs::FollowmeTagStatus const> FollowmeTagStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator2> & rhs)
{
  return lhs.dist_to_anchor == rhs.dist_to_anchor &&
    lhs.battery_lvl == rhs.battery_lvl &&
    lhs.signal_quality == rhs.signal_quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13e8bc9b26611e630173d62b92a0ae8a";
  }

  static const char* value(const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13e8bc9b26611e63ULL;
  static const uint64_t static_value2 = 0x0173d62b92a0ae8aULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/FollowmeTagStatus";
  }

  static const char* value(const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dist_to_anchor\n"
"uint8 battery_lvl\n"
"uint8 signal_quality\n"
"\n"
;
  }

  static const char* value(const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist_to_anchor);
      stream.next(m.battery_lvl);
      stream.next(m.signal_quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowmeTagStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::FollowmeTagStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::FollowmeTagStatus_<ContainerAllocator>& v)
  {
    s << indent << "dist_to_anchor: ";
    Printer<float>::stream(s, indent + "  ", v.dist_to_anchor);
    s << indent << "battery_lvl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_lvl);
    s << indent << "signal_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signal_quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_FOLLOWMETAGSTATUS_H
