// Generated by gencpp from file agv_msgs/LightCapability.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_LIGHTCAPABILITY_H
#define AGV_MSGS_MESSAGE_LIGHTCAPABILITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct LightCapability_
{
  typedef LightCapability_<ContainerAllocator> Type;

  LightCapability_()
    : name()
    , desc_name()
    , min_duty_period(0.0)
    , min_freq(0.0)
    , max_freq(0.0)
    , min_duty(0.0)
    , max_duty(0.0)
    , default_freq(0.0)
    , default_duty(0.0)
    , topic()  {
    }
  LightCapability_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , desc_name(_alloc)
    , min_duty_period(0.0)
    , min_freq(0.0)
    , max_freq(0.0)
    , min_duty(0.0)
    , max_duty(0.0)
    , default_freq(0.0)
    , default_duty(0.0)
    , topic(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _desc_name_type;
  _desc_name_type desc_name;

   typedef double _min_duty_period_type;
  _min_duty_period_type min_duty_period;

   typedef double _min_freq_type;
  _min_freq_type min_freq;

   typedef double _max_freq_type;
  _max_freq_type max_freq;

   typedef double _min_duty_type;
  _min_duty_type min_duty;

   typedef double _max_duty_type;
  _max_duty_type max_duty;

   typedef double _default_freq_type;
  _default_freq_type default_freq;

   typedef double _default_duty_type;
  _default_duty_type default_duty;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_type;
  _topic_type topic;





  typedef boost::shared_ptr< ::agv_msgs::LightCapability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::LightCapability_<ContainerAllocator> const> ConstPtr;

}; // struct LightCapability_

typedef ::agv_msgs::LightCapability_<std::allocator<void> > LightCapability;

typedef boost::shared_ptr< ::agv_msgs::LightCapability > LightCapabilityPtr;
typedef boost::shared_ptr< ::agv_msgs::LightCapability const> LightCapabilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::LightCapability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::LightCapability_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::LightCapability_<ContainerAllocator1> & lhs, const ::agv_msgs::LightCapability_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.desc_name == rhs.desc_name &&
    lhs.min_duty_period == rhs.min_duty_period &&
    lhs.min_freq == rhs.min_freq &&
    lhs.max_freq == rhs.max_freq &&
    lhs.min_duty == rhs.min_duty &&
    lhs.max_duty == rhs.max_duty &&
    lhs.default_freq == rhs.default_freq &&
    lhs.default_duty == rhs.default_duty &&
    lhs.topic == rhs.topic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::LightCapability_<ContainerAllocator1> & lhs, const ::agv_msgs::LightCapability_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::LightCapability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::LightCapability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::LightCapability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::LightCapability_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::LightCapability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::LightCapability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::LightCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "324c001d3c0f36b39a0b1a25c216ac00";
  }

  static const char* value(const ::agv_msgs::LightCapability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x324c001d3c0f36b3ULL;
  static const uint64_t static_value2 = 0x9a0b1a25c216ac00ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::LightCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/LightCapability";
  }

  static const char* value(const ::agv_msgs::LightCapability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::LightCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string desc_name\n"
"float64 min_duty_period\n"
"float64 min_freq\n"
"float64 max_freq\n"
"float64 min_duty\n"
"float64 max_duty\n"
"float64 default_freq\n"
"float64 default_duty\n"
"string topic\n"
;
  }

  static const char* value(const ::agv_msgs::LightCapability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::LightCapability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.desc_name);
      stream.next(m.min_duty_period);
      stream.next(m.min_freq);
      stream.next(m.max_freq);
      stream.next(m.min_duty);
      stream.next(m.max_duty);
      stream.next(m.default_freq);
      stream.next(m.default_duty);
      stream.next(m.topic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightCapability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::LightCapability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::LightCapability_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "desc_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.desc_name);
    s << indent << "min_duty_period: ";
    Printer<double>::stream(s, indent + "  ", v.min_duty_period);
    s << indent << "min_freq: ";
    Printer<double>::stream(s, indent + "  ", v.min_freq);
    s << indent << "max_freq: ";
    Printer<double>::stream(s, indent + "  ", v.max_freq);
    s << indent << "min_duty: ";
    Printer<double>::stream(s, indent + "  ", v.min_duty);
    s << indent << "max_duty: ";
    Printer<double>::stream(s, indent + "  ", v.max_duty);
    s << indent << "default_freq: ";
    Printer<double>::stream(s, indent + "  ", v.default_freq);
    s << indent << "default_duty: ";
    Printer<double>::stream(s, indent + "  ", v.default_duty);
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_LIGHTCAPABILITY_H
