// Generated by gencpp from file agv_msgs/LightState.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_LIGHTSTATE_H
#define AGV_MSGS_MESSAGE_LIGHTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct LightState_
{
  typedef LightState_<ContainerAllocator> Type;

  LightState_()
    : name()
    , freq(0.0)
    , duty(0.0)
    , periods_set(0)
    , periods_remaining(0)  {
    }
  LightState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , freq(0.0)
    , duty(0.0)
    , periods_set(0)
    , periods_remaining(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef float _freq_type;
  _freq_type freq;

   typedef float _duty_type;
  _duty_type duty;

   typedef uint32_t _periods_set_type;
  _periods_set_type periods_set;

   typedef uint32_t _periods_remaining_type;
  _periods_remaining_type periods_remaining;





  typedef boost::shared_ptr< ::agv_msgs::LightState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::LightState_<ContainerAllocator> const> ConstPtr;

}; // struct LightState_

typedef ::agv_msgs::LightState_<std::allocator<void> > LightState;

typedef boost::shared_ptr< ::agv_msgs::LightState > LightStatePtr;
typedef boost::shared_ptr< ::agv_msgs::LightState const> LightStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::LightState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::LightState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::LightState_<ContainerAllocator1> & lhs, const ::agv_msgs::LightState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.freq == rhs.freq &&
    lhs.duty == rhs.duty &&
    lhs.periods_set == rhs.periods_set &&
    lhs.periods_remaining == rhs.periods_remaining;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::LightState_<ContainerAllocator1> & lhs, const ::agv_msgs::LightState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::LightState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::LightState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::LightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::LightState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::LightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::LightState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::LightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a84044d93bb2367d8d3d39575e7564b6";
  }

  static const char* value(const ::agv_msgs::LightState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa84044d93bb2367dULL;
  static const uint64_t static_value2 = 0x8d3d39575e7564b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::LightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/LightState";
  }

  static const char* value(const ::agv_msgs::LightState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::LightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float32 freq\n"
"float32 duty\n"
"uint32 periods_set\n"
"uint32 periods_remaining\n"
;
  }

  static const char* value(const ::agv_msgs::LightState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::LightState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.freq);
      stream.next(m.duty);
      stream.next(m.periods_set);
      stream.next(m.periods_remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::LightState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::LightState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "freq: ";
    Printer<float>::stream(s, indent + "  ", v.freq);
    s << indent << "duty: ";
    Printer<float>::stream(s, indent + "  ", v.duty);
    s << indent << "periods_set: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.periods_set);
    s << indent << "periods_remaining: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.periods_remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_LIGHTSTATE_H
