// Generated by gencpp from file agv_msgs/NDTCell.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_NDTCELL_H
#define AGV_MSGS_MESSAGE_NDTCELL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct NDTCell_
{
  typedef NDTCell_<ContainerAllocator> Type;

  NDTCell_()
    : centroid()
    , covariance()
    , num_points(0)  {
      covariance.assign(0.0);
  }
  NDTCell_(const ContainerAllocator& _alloc)
    : centroid(_alloc)
    , covariance()
    , num_points(0)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef boost::array<double, 9>  _covariance_type;
  _covariance_type covariance;

   typedef uint64_t _num_points_type;
  _num_points_type num_points;





  typedef boost::shared_ptr< ::agv_msgs::NDTCell_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::NDTCell_<ContainerAllocator> const> ConstPtr;

}; // struct NDTCell_

typedef ::agv_msgs::NDTCell_<std::allocator<void> > NDTCell;

typedef boost::shared_ptr< ::agv_msgs::NDTCell > NDTCellPtr;
typedef boost::shared_ptr< ::agv_msgs::NDTCell const> NDTCellConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::NDTCell_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::NDTCell_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::NDTCell_<ContainerAllocator1> & lhs, const ::agv_msgs::NDTCell_<ContainerAllocator2> & rhs)
{
  return lhs.centroid == rhs.centroid &&
    lhs.covariance == rhs.covariance &&
    lhs.num_points == rhs.num_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::NDTCell_<ContainerAllocator1> & lhs, const ::agv_msgs::NDTCell_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NDTCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NDTCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NDTCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NDTCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NDTCell_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NDTCell_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::NDTCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65aeba4f5b8d0bf1ffd3b8955d3f8799";
  }

  static const char* value(const ::agv_msgs::NDTCell_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65aeba4f5b8d0bf1ULL;
  static const uint64_t static_value2 = 0xffd3b8955d3f8799ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::NDTCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/NDTCell";
  }

  static const char* value(const ::agv_msgs::NDTCell_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::NDTCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point  centroid\n"
"float64[9]           covariance\n"
"uint64               num_points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::agv_msgs::NDTCell_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::NDTCell_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centroid);
      stream.next(m.covariance);
      stream.next(m.num_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NDTCell_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::NDTCell_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::NDTCell_<ContainerAllocator>& v)
  {
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "num_points: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_NDTCELL_H
