// Generated by gencpp from file agv_msgs/TrajectoryControllerState.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_TRAJECTORYCONTROLLERSTATE_H
#define AGV_MSGS_MESSAGE_TRAJECTORYCONTROLLERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Header.h>
#include <std_msgs/Header.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct TrajectoryControllerState_
{
  typedef TrajectoryControllerState_<ContainerAllocator> Type;

  TrajectoryControllerState_()
    : state(0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , predicted_lateral_error(0.0)
    , predicted_heading_error(0.0)
    , travelled_trajectory_ratio(0.0)
    , stopping_position_on_trajectory(0.0)
    , target_centripetal_acceleration(0.0)
    , actual_centripetal_acceleration(0.0)
    , trajectory_centripetal_acceleration(0.0)
    , trajectory_header()
    , closest_point_header()
    , closest_point_offset(0.0)
    , stopping_point_header()
    , stopping_point_offset(0.0)  {
    }
  TrajectoryControllerState_(const ContainerAllocator& _alloc)
    : state(0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , predicted_lateral_error(0.0)
    , predicted_heading_error(0.0)
    , travelled_trajectory_ratio(0.0)
    , stopping_position_on_trajectory(0.0)
    , target_centripetal_acceleration(0.0)
    , actual_centripetal_acceleration(0.0)
    , trajectory_centripetal_acceleration(0.0)
    , trajectory_header(_alloc)
    , closest_point_header(_alloc)
    , closest_point_offset(0.0)
    , stopping_point_header(_alloc)
    , stopping_point_offset(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef double _lateral_error_type;
  _lateral_error_type lateral_error;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef double _predicted_lateral_error_type;
  _predicted_lateral_error_type predicted_lateral_error;

   typedef double _predicted_heading_error_type;
  _predicted_heading_error_type predicted_heading_error;

   typedef double _travelled_trajectory_ratio_type;
  _travelled_trajectory_ratio_type travelled_trajectory_ratio;

   typedef double _stopping_position_on_trajectory_type;
  _stopping_position_on_trajectory_type stopping_position_on_trajectory;

   typedef double _target_centripetal_acceleration_type;
  _target_centripetal_acceleration_type target_centripetal_acceleration;

   typedef double _actual_centripetal_acceleration_type;
  _actual_centripetal_acceleration_type actual_centripetal_acceleration;

   typedef double _trajectory_centripetal_acceleration_type;
  _trajectory_centripetal_acceleration_type trajectory_centripetal_acceleration;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _trajectory_header_type;
  _trajectory_header_type trajectory_header;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _closest_point_header_type;
  _closest_point_header_type closest_point_header;

   typedef double _closest_point_offset_type;
  _closest_point_offset_type closest_point_offset;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _stopping_point_header_type;
  _stopping_point_header_type stopping_point_header;

   typedef double _stopping_point_offset_type;
  _stopping_point_offset_type stopping_point_offset;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ST_IDLE)
  #undef ST_IDLE
#endif
#if defined(_WIN32) && defined(ST_START)
  #undef ST_START
#endif
#if defined(_WIN32) && defined(ST_OK)
  #undef ST_OK
#endif
#if defined(_WIN32) && defined(ST_END)
  #undef ST_END
#endif
#if defined(_WIN32) && defined(ST_TRACKING_ERROR_HIGH)
  #undef ST_TRACKING_ERROR_HIGH
#endif
#if defined(_WIN32) && defined(ST_LATERAL_ERROR_HIGH)
  #undef ST_LATERAL_ERROR_HIGH
#endif
#if defined(_WIN32) && defined(ST_HEADING_ERROR_HIGH)
  #undef ST_HEADING_ERROR_HIGH
#endif
#if defined(_WIN32) && defined(ST_ERROR)
  #undef ST_ERROR
#endif

  enum {
    ST_IDLE = 0u,
    ST_START = 1u,
    ST_OK = 2u,
    ST_END = 3u,
    ST_TRACKING_ERROR_HIGH = 4u,
    ST_LATERAL_ERROR_HIGH = 5u,
    ST_HEADING_ERROR_HIGH = 6u,
    ST_ERROR = 7u,
  };


  typedef boost::shared_ptr< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryControllerState_

typedef ::agv_msgs::TrajectoryControllerState_<std::allocator<void> > TrajectoryControllerState;

typedef boost::shared_ptr< ::agv_msgs::TrajectoryControllerState > TrajectoryControllerStatePtr;
typedef boost::shared_ptr< ::agv_msgs::TrajectoryControllerState const> TrajectoryControllerStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator1> & lhs, const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.lateral_error == rhs.lateral_error &&
    lhs.heading_error == rhs.heading_error &&
    lhs.predicted_lateral_error == rhs.predicted_lateral_error &&
    lhs.predicted_heading_error == rhs.predicted_heading_error &&
    lhs.travelled_trajectory_ratio == rhs.travelled_trajectory_ratio &&
    lhs.stopping_position_on_trajectory == rhs.stopping_position_on_trajectory &&
    lhs.target_centripetal_acceleration == rhs.target_centripetal_acceleration &&
    lhs.actual_centripetal_acceleration == rhs.actual_centripetal_acceleration &&
    lhs.trajectory_centripetal_acceleration == rhs.trajectory_centripetal_acceleration &&
    lhs.trajectory_header == rhs.trajectory_header &&
    lhs.closest_point_header == rhs.closest_point_header &&
    lhs.closest_point_offset == rhs.closest_point_offset &&
    lhs.stopping_point_header == rhs.stopping_point_header &&
    lhs.stopping_point_offset == rhs.stopping_point_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator1> & lhs, const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "350099b8a58862f1bbb2702387d2460d";
  }

  static const char* value(const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x350099b8a58862f1ULL;
  static const uint64_t static_value2 = 0xbbb2702387d2460dULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/TrajectoryControllerState";
  }

  static const char* value(const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ST_IDLE = 0\n"
"uint8 ST_START = 1 \n"
"uint8 ST_OK = 2\n"
"uint8 ST_END = 3\n"
"uint8 ST_TRACKING_ERROR_HIGH = 4\n"
"uint8 ST_LATERAL_ERROR_HIGH = 5\n"
"uint8 ST_HEADING_ERROR_HIGH = 6\n"
"uint8 ST_ERROR = 7\n"
"\n"
"uint8 state \n"
"float64 lateral_error\n"
"float64 heading_error\n"
"float64 predicted_lateral_error\n"
"float64 predicted_heading_error\n"
"float64 travelled_trajectory_ratio\n"
"float64 stopping_position_on_trajectory\n"
"float64 target_centripetal_acceleration\n"
"float64 actual_centripetal_acceleration\n"
"float64 trajectory_centripetal_acceleration\n"
"\n"
"Header trajectory_header\n"
"Header closest_point_header\n"
"float64 closest_point_offset\n"
"Header stopping_point_header\n"
"float64 stopping_point_offset\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.lateral_error);
      stream.next(m.heading_error);
      stream.next(m.predicted_lateral_error);
      stream.next(m.predicted_heading_error);
      stream.next(m.travelled_trajectory_ratio);
      stream.next(m.stopping_position_on_trajectory);
      stream.next(m.target_centripetal_acceleration);
      stream.next(m.actual_centripetal_acceleration);
      stream.next(m.trajectory_centripetal_acceleration);
      stream.next(m.trajectory_header);
      stream.next(m.closest_point_header);
      stream.next(m.closest_point_offset);
      stream.next(m.stopping_point_header);
      stream.next(m.stopping_point_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::TrajectoryControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::TrajectoryControllerState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "lateral_error: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_error);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "predicted_lateral_error: ";
    Printer<double>::stream(s, indent + "  ", v.predicted_lateral_error);
    s << indent << "predicted_heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.predicted_heading_error);
    s << indent << "travelled_trajectory_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.travelled_trajectory_ratio);
    s << indent << "stopping_position_on_trajectory: ";
    Printer<double>::stream(s, indent + "  ", v.stopping_position_on_trajectory);
    s << indent << "target_centripetal_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.target_centripetal_acceleration);
    s << indent << "actual_centripetal_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.actual_centripetal_acceleration);
    s << indent << "trajectory_centripetal_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_centripetal_acceleration);
    s << indent << "trajectory_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_header);
    s << indent << "closest_point_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.closest_point_header);
    s << indent << "closest_point_offset: ";
    Printer<double>::stream(s, indent + "  ", v.closest_point_offset);
    s << indent << "stopping_point_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.stopping_point_header);
    s << indent << "stopping_point_offset: ";
    Printer<double>::stream(s, indent + "  ", v.stopping_point_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_TRAJECTORYCONTROLLERSTATE_H
