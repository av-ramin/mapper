// Generated by gencpp from file agv_msgs/Barometer.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_BAROMETER_H
#define AGV_MSGS_MESSAGE_BAROMETER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct Barometer_
{
  typedef Barometer_<ContainerAllocator> Type;

  Barometer_()
    : header()
    , pressure(0.0)
    , altitude(0.0)
    , pressure_variance(0.0)
    , altitude_variance(0.0)
    , altitude_datum(0)  {
    }
  Barometer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pressure(0.0)
    , altitude(0.0)
    , pressure_variance(0.0)
    , altitude_variance(0.0)
    , altitude_datum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _pressure_type;
  _pressure_type pressure;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _pressure_variance_type;
  _pressure_variance_type pressure_variance;

   typedef double _altitude_variance_type;
  _altitude_variance_type altitude_variance;

   typedef uint16_t _altitude_datum_type;
  _altitude_datum_type altitude_datum;





  typedef boost::shared_ptr< ::agv_msgs::Barometer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::Barometer_<ContainerAllocator> const> ConstPtr;

}; // struct Barometer_

typedef ::agv_msgs::Barometer_<std::allocator<void> > Barometer;

typedef boost::shared_ptr< ::agv_msgs::Barometer > BarometerPtr;
typedef boost::shared_ptr< ::agv_msgs::Barometer const> BarometerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::Barometer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::Barometer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::Barometer_<ContainerAllocator1> & lhs, const ::agv_msgs::Barometer_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pressure == rhs.pressure &&
    lhs.altitude == rhs.altitude &&
    lhs.pressure_variance == rhs.pressure_variance &&
    lhs.altitude_variance == rhs.altitude_variance &&
    lhs.altitude_datum == rhs.altitude_datum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::Barometer_<ContainerAllocator1> & lhs, const ::agv_msgs::Barometer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Barometer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Barometer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Barometer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Barometer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Barometer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Barometer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::Barometer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a020ce80c5d250ada5a7e4279fde9898";
  }

  static const char* value(const ::agv_msgs::Barometer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa020ce80c5d250adULL;
  static const uint64_t static_value2 = 0xa5a7e4279fde9898ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::Barometer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Barometer";
  }

  static const char* value(const ::agv_msgs::Barometer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::Barometer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 pressure # Pa\n"
"float64 altitude\n"
"\n"
"# 0 is interpreted as variance unknown\n"
"float64 pressure_variance\n"
"float64 altitude_variance\n"
"\n"
"# EPSG code of the vertical datum used for altitude, e.g. 4326 for WGS84.\n"
"# Set to 0 when altitude is not referenced against any datum.\n"
"uint16 altitude_datum\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::agv_msgs::Barometer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::Barometer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pressure);
      stream.next(m.altitude);
      stream.next(m.pressure_variance);
      stream.next(m.altitude_variance);
      stream.next(m.altitude_datum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Barometer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::Barometer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::Barometer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pressure: ";
    Printer<double>::stream(s, indent + "  ", v.pressure);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "pressure_variance: ";
    Printer<double>::stream(s, indent + "  ", v.pressure_variance);
    s << indent << "altitude_variance: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_variance);
    s << indent << "altitude_datum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.altitude_datum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_BAROMETER_H
