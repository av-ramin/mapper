// Generated by gencpp from file agv_msgs/NDTMap.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_NDTMAP_H
#define AGV_MSGS_MESSAGE_NDTMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <agv_msgs/NDTCell.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct NDTMap_
{
  typedef NDTMap_<ContainerAllocator> Type;

  NDTMap_()
    : header()
    , cloud_bounds_min()
    , cloud_bounds_max()
    , grid_bounds_min()
    , grid_bounds_max()
    , grid_resolution()
    , cells()  {
    }
  NDTMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cloud_bounds_min(_alloc)
    , cloud_bounds_max(_alloc)
    , grid_bounds_min(_alloc)
    , grid_bounds_max(_alloc)
    , grid_resolution(_alloc)
    , cells(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _cloud_bounds_min_type;
  _cloud_bounds_min_type cloud_bounds_min;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _cloud_bounds_max_type;
  _cloud_bounds_max_type cloud_bounds_max;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _grid_bounds_min_type;
  _grid_bounds_min_type grid_bounds_min;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _grid_bounds_max_type;
  _grid_bounds_max_type grid_bounds_max;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _grid_resolution_type;
  _grid_resolution_type grid_resolution;

   typedef std::vector< ::agv_msgs::NDTCell_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::NDTCell_<ContainerAllocator> >> _cells_type;
  _cells_type cells;





  typedef boost::shared_ptr< ::agv_msgs::NDTMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::NDTMap_<ContainerAllocator> const> ConstPtr;

}; // struct NDTMap_

typedef ::agv_msgs::NDTMap_<std::allocator<void> > NDTMap;

typedef boost::shared_ptr< ::agv_msgs::NDTMap > NDTMapPtr;
typedef boost::shared_ptr< ::agv_msgs::NDTMap const> NDTMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::NDTMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::NDTMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::NDTMap_<ContainerAllocator1> & lhs, const ::agv_msgs::NDTMap_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cloud_bounds_min == rhs.cloud_bounds_min &&
    lhs.cloud_bounds_max == rhs.cloud_bounds_max &&
    lhs.grid_bounds_min == rhs.grid_bounds_min &&
    lhs.grid_bounds_max == rhs.grid_bounds_max &&
    lhs.grid_resolution == rhs.grid_resolution &&
    lhs.cells == rhs.cells;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::NDTMap_<ContainerAllocator1> & lhs, const ::agv_msgs::NDTMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NDTMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NDTMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NDTMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NDTMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NDTMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NDTMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::NDTMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d146211345303955e78e8c67700a3b2";
  }

  static const char* value(const ::agv_msgs::NDTMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d14621134530395ULL;
  static const uint64_t static_value2 = 0x5e78e8c67700a3b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::NDTMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/NDTMap";
  }

  static const char* value(const ::agv_msgs::NDTMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::NDTMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                  header\n"
"\n"
"geometry_msgs/Vector3   cloud_bounds_min\n"
"geometry_msgs/Vector3   cloud_bounds_max\n"
"\n"
"geometry_msgs/Vector3   grid_bounds_min\n"
"geometry_msgs/Vector3   grid_bounds_max\n"
"\n"
"geometry_msgs/Vector3   grid_resolution\n"
"\n"
"NDTCell[]               cells\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: agv_msgs/NDTCell\n"
"geometry_msgs/Point  centroid\n"
"float64[9]           covariance\n"
"uint64               num_points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::agv_msgs::NDTMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::NDTMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cloud_bounds_min);
      stream.next(m.cloud_bounds_max);
      stream.next(m.grid_bounds_min);
      stream.next(m.grid_bounds_max);
      stream.next(m.grid_resolution);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NDTMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::NDTMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::NDTMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cloud_bounds_min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_bounds_min);
    s << indent << "cloud_bounds_max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_bounds_max);
    s << indent << "grid_bounds_min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.grid_bounds_min);
    s << indent << "grid_bounds_max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.grid_bounds_max);
    s << indent << "grid_resolution: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.grid_resolution);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::NDTCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_NDTMAP_H
