// Generated by gencpp from file agv_msgs/NavigationStatus.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_NAVIGATIONSTATUS_H
#define AGV_MSGS_MESSAGE_NAVIGATIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <agv_msgs/ID.h>
#include <agv_msgs/ID.h>
#include <agv_msgs/NavigationConfig.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct NavigationStatus_
{
  typedef NavigationStatus_<ContainerAllocator> Type;

  NavigationStatus_()
    : header()
    , path_id()
    , current_waypoint_id()
    , active(false)
    , paused(false)
    , mode(0)
    , config()
    , loop_iteration(0)  {
    }
  NavigationStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , path_id(_alloc)
    , current_waypoint_id(_alloc)
    , active(false)
    , paused(false)
    , mode(0)
    , config(_alloc)
    , loop_iteration(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::agv_msgs::ID_<ContainerAllocator>  _path_id_type;
  _path_id_type path_id;

   typedef  ::agv_msgs::ID_<ContainerAllocator>  _current_waypoint_id_type;
  _current_waypoint_id_type current_waypoint_id;

   typedef uint8_t _active_type;
  _active_type active;

   typedef uint8_t _paused_type;
  _paused_type paused;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::agv_msgs::NavigationConfig_<ContainerAllocator>  _config_type;
  _config_type config;

   typedef uint16_t _loop_iteration_type;
  _loop_iteration_type loop_iteration;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(NAVIGATION)
  #undef NAVIGATION
#endif
#if defined(_WIN32) && defined(RALLY_POINT)
  #undef RALLY_POINT
#endif
#if defined(_WIN32) && defined(RECORDER)
  #undef RECORDER
#endif
#if defined(_WIN32) && defined(START_ITERATION)
  #undef START_ITERATION
#endif

  enum {
    UNKNOWN = 0u,
    NAVIGATION = 1u,
    RALLY_POINT = 2u,
    RECORDER = 3u,
    START_ITERATION = 1u,
  };


  typedef boost::shared_ptr< ::agv_msgs::NavigationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::NavigationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationStatus_

typedef ::agv_msgs::NavigationStatus_<std::allocator<void> > NavigationStatus;

typedef boost::shared_ptr< ::agv_msgs::NavigationStatus > NavigationStatusPtr;
typedef boost::shared_ptr< ::agv_msgs::NavigationStatus const> NavigationStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::NavigationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::NavigationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::NavigationStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::NavigationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.path_id == rhs.path_id &&
    lhs.current_waypoint_id == rhs.current_waypoint_id &&
    lhs.active == rhs.active &&
    lhs.paused == rhs.paused &&
    lhs.mode == rhs.mode &&
    lhs.config == rhs.config &&
    lhs.loop_iteration == rhs.loop_iteration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::NavigationStatus_<ContainerAllocator1> & lhs, const ::agv_msgs::NavigationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavigationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavigationStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavigationStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a149a87a3a79c58017a11d4e6e8cb71c";
  }

  static const char* value(const ::agv_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa149a87a3a79c580ULL;
  static const uint64_t static_value2 = 0x17a11d4e6e8cb71cULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/NavigationStatus";
  }

  static const char* value(const ::agv_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"agv_msgs/ID path_id\n"
"agv_msgs/ID current_waypoint_id\n"
"bool active\n"
"bool paused\n"
"\n"
"uint8 mode\n"
"uint8 UNKNOWN = 0\n"
"uint8 NAVIGATION = 1\n"
"uint8 RALLY_POINT = 2\n"
"uint8 RECORDER = 3\n"
"\n"
"agv_msgs/NavigationConfig config\n"
"uint16 loop_iteration\n"
"uint8 START_ITERATION = 1\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/NavigationConfig\n"
"uint8 direction\n"
"uint8 DIR_FORWARD=0\n"
"uint8 DIR_CLOCKWISE=0\n"
"uint8 DIR_REVERSE=1\n"
"uint8 DIR_COUNTERCLOCKWISE=1\n"
"\n"
"uint8 repeat_mode\n"
"uint8 REPEAT_NONE=0\n"
"uint8 REPEAT_CIRCULAR=1\n"
"uint8 REPEAT_DOUBLE_BACK=2\n"
"\n"
"uint16 no_of_loops\n"
"uint8 INFINITE_LOOPS = 0\n"
"uint8 SINGLE_EXECUTION = 1\n"
;
  }

  static const char* value(const ::agv_msgs::NavigationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.path_id);
      stream.next(m.current_waypoint_id);
      stream.next(m.active);
      stream.next(m.paused);
      stream.next(m.mode);
      stream.next(m.config);
      stream.next(m.loop_iteration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::NavigationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::NavigationStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "path_id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.path_id);
    s << indent << "current_waypoint_id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.current_waypoint_id);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "paused: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paused);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "config: ";
    s << std::endl;
    Printer< ::agv_msgs::NavigationConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.config);
    s << indent << "loop_iteration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.loop_iteration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_NAVIGATIONSTATUS_H
