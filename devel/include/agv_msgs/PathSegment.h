// Generated by gencpp from file agv_msgs/PathSegment.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_PATHSEGMENT_H
#define AGV_MSGS_MESSAGE_PATHSEGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>
#include <agv_msgs/PathSegmentInfo.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct PathSegment_
{
  typedef PathSegment_<ContainerAllocator> Type;

  PathSegment_()
    : ids()
    , info()  {
    }
  PathSegment_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::agv_msgs::ID_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agv_msgs::ID_<ContainerAllocator> >> _ids_type;
  _ids_type ids;

   typedef  ::agv_msgs::PathSegmentInfo_<ContainerAllocator>  _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::agv_msgs::PathSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::PathSegment_<ContainerAllocator> const> ConstPtr;

}; // struct PathSegment_

typedef ::agv_msgs::PathSegment_<std::allocator<void> > PathSegment;

typedef boost::shared_ptr< ::agv_msgs::PathSegment > PathSegmentPtr;
typedef boost::shared_ptr< ::agv_msgs::PathSegment const> PathSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::PathSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::PathSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::PathSegment_<ContainerAllocator1> & lhs, const ::agv_msgs::PathSegment_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::PathSegment_<ContainerAllocator1> & lhs, const ::agv_msgs::PathSegment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::PathSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::PathSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::PathSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::PathSegment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::PathSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::PathSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::PathSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "514c4a42318df3f68cc4c347460e4627";
  }

  static const char* value(const ::agv_msgs::PathSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x514c4a42318df3f6ULL;
  static const uint64_t static_value2 = 0x8cc4c347460e4627ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::PathSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/PathSegment";
  }

  static const char* value(const ::agv_msgs::PathSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::PathSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID[] ids\n"
"agv_msgs/PathSegmentInfo info\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: agv_msgs/PathSegmentInfo\n"
"agv_msgs/ID id\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"\n"
"string name\n"
"uint8[4] color\n"
;
  }

  static const char* value(const ::agv_msgs::PathSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::PathSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::PathSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::PathSegment_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "    ", v.ids[i]);
    }
    s << indent << "info: ";
    s << std::endl;
    Printer< ::agv_msgs::PathSegmentInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_PATHSEGMENT_H
