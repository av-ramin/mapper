// Generated by gencpp from file agv_msgs/StringWithSchema.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_STRINGWITHSCHEMA_H
#define AGV_MSGS_MESSAGE_STRINGWITHSCHEMA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct StringWithSchema_
{
  typedef StringWithSchema_<ContainerAllocator> Type;

  StringWithSchema_()
    : data()
    , schema()
    , format(0)  {
    }
  StringWithSchema_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , schema(_alloc)
    , format(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _schema_type;
  _schema_type schema;

   typedef uint8_t _format_type;
  _format_type format;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(JSON)
  #undef JSON
#endif
#if defined(_WIN32) && defined(CSV)
  #undef CSV
#endif
#if defined(_WIN32) && defined(XML)
  #undef XML
#endif
#if defined(_WIN32) && defined(YAML)
  #undef YAML
#endif

  enum {
    JSON = 1u,
    CSV = 2u,
    XML = 3u,
    YAML = 4u,
  };


  typedef boost::shared_ptr< ::agv_msgs::StringWithSchema_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::StringWithSchema_<ContainerAllocator> const> ConstPtr;

}; // struct StringWithSchema_

typedef ::agv_msgs::StringWithSchema_<std::allocator<void> > StringWithSchema;

typedef boost::shared_ptr< ::agv_msgs::StringWithSchema > StringWithSchemaPtr;
typedef boost::shared_ptr< ::agv_msgs::StringWithSchema const> StringWithSchemaConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::StringWithSchema_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::StringWithSchema_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::StringWithSchema_<ContainerAllocator1> & lhs, const ::agv_msgs::StringWithSchema_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.schema == rhs.schema &&
    lhs.format == rhs.format;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::StringWithSchema_<ContainerAllocator1> & lhs, const ::agv_msgs::StringWithSchema_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::StringWithSchema_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::StringWithSchema_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::StringWithSchema_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f675b16631313e8f7598f59aa6b9873b";
  }

  static const char* value(const ::agv_msgs::StringWithSchema_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf675b16631313e8fULL;
  static const uint64_t static_value2 = 0x7598f59aa6b9873bULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/StringWithSchema";
  }

  static const char* value(const ::agv_msgs::StringWithSchema_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string data\n"
"string schema\n"
"uint8 format\n"
"uint8 JSON=1\n"
"uint8 CSV=2\n"
"uint8 XML=3\n"
"uint8 YAML=4\n"
;
  }

  static const char* value(const ::agv_msgs::StringWithSchema_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.schema);
      stream.next(m.format);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StringWithSchema_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::StringWithSchema_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::StringWithSchema_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data);
    s << indent << "schema: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.schema);
    s << indent << "format: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.format);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_STRINGWITHSCHEMA_H
