// Generated by gencpp from file agv_msgs/EncoderData.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_ENCODERDATA_H
#define AGV_MSGS_MESSAGE_ENCODERDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct EncoderData_
{
  typedef EncoderData_<ContainerAllocator> Type;

  EncoderData_()
    : velocity(0.0)
    , distance(0.0)
    , units(0)  {
    }
  EncoderData_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , distance(0.0)
    , units(0)  {
  (void)_alloc;
    }



   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _distance_type;
  _distance_type distance;

   typedef uint8_t _units_type;
  _units_type units;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RPM)
  #undef RPM
#endif
#if defined(_WIN32) && defined(RAD_S)
  #undef RAD_S
#endif
#if defined(_WIN32) && defined(M_S)
  #undef M_S
#endif
#if defined(_WIN32) && defined(TICKS)
  #undef TICKS
#endif

  enum {
    RPM = 0u,
    RAD_S = 1u,
    M_S = 2u,
    TICKS = 3u,
  };


  typedef boost::shared_ptr< ::agv_msgs::EncoderData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::EncoderData_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderData_

typedef ::agv_msgs::EncoderData_<std::allocator<void> > EncoderData;

typedef boost::shared_ptr< ::agv_msgs::EncoderData > EncoderDataPtr;
typedef boost::shared_ptr< ::agv_msgs::EncoderData const> EncoderDataConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::EncoderData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::EncoderData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::EncoderData_<ContainerAllocator1> & lhs, const ::agv_msgs::EncoderData_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.distance == rhs.distance &&
    lhs.units == rhs.units;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::EncoderData_<ContainerAllocator1> & lhs, const ::agv_msgs::EncoderData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::EncoderData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::EncoderData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::EncoderData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::EncoderData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::EncoderData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::EncoderData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ed93d667b28e9c960e1b5b4789dc7c5";
  }

  static const char* value(const ::agv_msgs::EncoderData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ed93d667b28e9c9ULL;
  static const uint64_t static_value2 = 0x60e1b5b4789dc7c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/EncoderData";
  }

  static const char* value(const ::agv_msgs::EncoderData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity\n"
"float32 distance\n"
"\n"
"uint8 units\n"
"uint8 RPM=0     # velocity in rpm,      distance in rotations\n"
"uint8 RAD_S=1   # velocity in rad/s,    distance in radians\n"
"uint8 M_S=2     # velocity in m/s,      distance in metres\n"
"uint8 TICKS=3   # velocity in ticks/s,  distance in ticks\n"
;
  }

  static const char* value(const ::agv_msgs::EncoderData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::EncoderData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.distance);
      stream.next(m.units);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::EncoderData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::EncoderData_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "units: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.units);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_ENCODERDATA_H
