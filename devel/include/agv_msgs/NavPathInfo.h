// Generated by gencpp from file agv_msgs/NavPathInfo.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_NAVPATHINFO_H
#define AGV_MSGS_MESSAGE_NAVPATHINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_msgs/ID.h>
#include <std_msgs/ColorRGBA.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct NavPathInfo_
{
  typedef NavPathInfo_<ContainerAllocator> Type;

  NavPathInfo_()
    : id()
    , creation_time()
    , type(0)
    , uncertainty(0)
    , name()
    , color()  {
    }
  NavPathInfo_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , creation_time()
    , type(0)
    , uncertainty(0)
    , name(_alloc)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef  ::agv_msgs::ID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef ros::Time _creation_time_type;
  _creation_time_type creation_time;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _uncertainty_type;
  _uncertainty_type uncertainty;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(MANUAL)
  #undef MANUAL
#endif
#if defined(_WIN32) && defined(RECORDED)
  #undef RECORDED
#endif
#if defined(_WIN32) && defined(IMPORTED)
  #undef IMPORTED
#endif
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(UNCERTAIN)
  #undef UNCERTAIN
#endif

  enum {
    UNKNOWN = 0u,
    MANUAL = 1u,
    RECORDED = 2u,
    IMPORTED = 3u,
    OK = 0u,
    UNCERTAIN = 1u,
  };


  typedef boost::shared_ptr< ::agv_msgs::NavPathInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::NavPathInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NavPathInfo_

typedef ::agv_msgs::NavPathInfo_<std::allocator<void> > NavPathInfo;

typedef boost::shared_ptr< ::agv_msgs::NavPathInfo > NavPathInfoPtr;
typedef boost::shared_ptr< ::agv_msgs::NavPathInfo const> NavPathInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::NavPathInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::NavPathInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::NavPathInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::NavPathInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.creation_time == rhs.creation_time &&
    lhs.type == rhs.type &&
    lhs.uncertainty == rhs.uncertainty &&
    lhs.name == rhs.name &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::NavPathInfo_<ContainerAllocator1> & lhs, const ::agv_msgs::NavPathInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::NavPathInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::NavPathInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::NavPathInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15f56a45b039a39725c3469a1fbf2667";
  }

  static const char* value(const ::agv_msgs::NavPathInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15f56a45b039a397ULL;
  static const uint64_t static_value2 = 0x25c3469a1fbf2667ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/NavPathInfo";
  }

  static const char* value(const ::agv_msgs::NavPathInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/ID id\n"
"time creation_time\n"
"\n"
"uint8 type\n"
"uint8 UNKNOWN=0\n"
"uint8 MANUAL=1\n"
"uint8 RECORDED=2\n"
"uint8 IMPORTED=3\n"
"\n"
"uint8 uncertainty\n"
"uint8 OK=0\n"
"uint8 UNCERTAIN=1\n"
"\n"
"string name\n"
"std_msgs/ColorRGBA color\n"
"================================================================================\n"
"MSG: agv_msgs/ID\n"
" uint32 data\n"
"\n"
" uint32 INVALID_ID=0\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::agv_msgs::NavPathInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.creation_time);
      stream.next(m.type);
      stream.next(m.uncertainty);
      stream.next(m.name);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavPathInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::NavPathInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::NavPathInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::agv_msgs::ID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "creation_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.creation_time);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "uncertainty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uncertainty);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_NAVPATHINFO_H
