// Generated by gencpp from file agv_msgs/SplineDriveParam.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_SPLINEDRIVEPARAM_H
#define AGV_MSGS_MESSAGE_SPLINEDRIVEPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct SplineDriveParam_
{
  typedef SplineDriveParam_<ContainerAllocator> Type;

  SplineDriveParam_()
    : position_offset(0.0)
    , desired_v(0.0)
    , max_a(0.0)
    , incline_angle(0.0)  {
    }
  SplineDriveParam_(const ContainerAllocator& _alloc)
    : position_offset(0.0)
    , desired_v(0.0)
    , max_a(0.0)
    , incline_angle(0.0)  {
  (void)_alloc;
    }



   typedef double _position_offset_type;
  _position_offset_type position_offset;

   typedef double _desired_v_type;
  _desired_v_type desired_v;

   typedef double _max_a_type;
  _max_a_type max_a;

   typedef double _incline_angle_type;
  _incline_angle_type incline_angle;





  typedef boost::shared_ptr< ::agv_msgs::SplineDriveParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::SplineDriveParam_<ContainerAllocator> const> ConstPtr;

}; // struct SplineDriveParam_

typedef ::agv_msgs::SplineDriveParam_<std::allocator<void> > SplineDriveParam;

typedef boost::shared_ptr< ::agv_msgs::SplineDriveParam > SplineDriveParamPtr;
typedef boost::shared_ptr< ::agv_msgs::SplineDriveParam const> SplineDriveParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::SplineDriveParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::SplineDriveParam_<ContainerAllocator1> & lhs, const ::agv_msgs::SplineDriveParam_<ContainerAllocator2> & rhs)
{
  return lhs.position_offset == rhs.position_offset &&
    lhs.desired_v == rhs.desired_v &&
    lhs.max_a == rhs.max_a &&
    lhs.incline_angle == rhs.incline_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::SplineDriveParam_<ContainerAllocator1> & lhs, const ::agv_msgs::SplineDriveParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::SplineDriveParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::SplineDriveParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::SplineDriveParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3a6d815da24b8149fc628a98810f734";
  }

  static const char* value(const ::agv_msgs::SplineDriveParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3a6d815da24b814ULL;
  static const uint64_t static_value2 = 0x9fc628a98810f734ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/SplineDriveParam";
  }

  static const char* value(const ::agv_msgs::SplineDriveParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position_offset\n"
"float64 desired_v\n"
"float64 max_a\n"
"float64 incline_angle\n"
;
  }

  static const char* value(const ::agv_msgs::SplineDriveParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_offset);
      stream.next(m.desired_v);
      stream.next(m.max_a);
      stream.next(m.incline_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SplineDriveParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::SplineDriveParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::SplineDriveParam_<ContainerAllocator>& v)
  {
    s << indent << "position_offset: ";
    Printer<double>::stream(s, indent + "  ", v.position_offset);
    s << indent << "desired_v: ";
    Printer<double>::stream(s, indent + "  ", v.desired_v);
    s << indent << "max_a: ";
    Printer<double>::stream(s, indent + "  ", v.max_a);
    s << indent << "incline_angle: ";
    Printer<double>::stream(s, indent + "  ", v.incline_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_SPLINEDRIVEPARAM_H
