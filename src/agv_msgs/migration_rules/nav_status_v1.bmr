class update_agv_msgs_NavigationStatus_c6541bc657e5460185da1ab9b5b7c0cb(MessageUpdateRule):
	old_type = "agv_msgs/NavigationStatus"
	old_full_text = """
Header header
agv_msgs/ID path_id
agv_msgs/ID current_waypoint_id
bool active

uint8 mode
uint8 UNKNOWN = 0
uint8 NAVIGATION = 1
uint8 RALLY_POINT = 2
uint8 RECORDER = 3

agv_msgs/NavigationConfig config
uint16 loop_iteration
uint8 START_ITERATION = 1
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: agv_msgs/NavigationConfig
uint8 direction
uint8 DIR_FORWARD=0
uint8 DIR_CLOCKWISE=0
uint8 DIR_REVERSE=1
uint8 DIR_COUNTERCLOCKWISE=1

uint8 repeat_mode
uint8 REPEAT_NONE=0
uint8 REPEAT_CIRCULAR=1
uint8 REPEAT_DOUBLE_BACK=2

uint16 no_of_loops
uint8 INFINITE_LOOPS = 0
uint8 SINGLE_EXECUTION = 1
"""

	new_type = "agv_msgs/NavigationStatus"
	new_full_text = """
Header header
agv_msgs/ID path_id
agv_msgs/ID current_waypoint_id
bool active
bool paused

uint8 mode
uint8 UNKNOWN = 0
uint8 NAVIGATION = 1
uint8 RALLY_POINT = 2
uint8 RECORDER = 3

agv_msgs/NavigationConfig config
uint16 loop_iteration
uint8 START_ITERATION = 1
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: agv_msgs/ID
 uint32 data

 uint32 INVALID_ID=0

================================================================================
MSG: agv_msgs/NavigationConfig
uint8 direction
uint8 DIR_FORWARD=0
uint8 DIR_CLOCKWISE=0
uint8 DIR_REVERSE=1
uint8 DIR_COUNTERCLOCKWISE=1

uint8 repeat_mode
uint8 REPEAT_NONE=0
uint8 REPEAT_CIRCULAR=1
uint8 REPEAT_DOUBLE_BACK=2

uint16 no_of_loops
uint8 INFINITE_LOOPS = 0
uint8 SINGLE_EXECUTION = 1
"""

	order = 0
	migrated_types = [
		("Header","Header"),
		("ID","ID"),
		("NavigationConfig","NavigationConfig"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		self.migrate(old_msg.path_id, new_msg.path_id)
		self.migrate(old_msg.current_waypoint_id, new_msg.current_waypoint_id)
		new_msg.active = False
		new_msg.paused = not old_msg.active
		new_msg.mode = old_msg.mode
		self.migrate(old_msg.config, new_msg.config)
		new_msg.loop_iteration = old_msg.loop_iteration
